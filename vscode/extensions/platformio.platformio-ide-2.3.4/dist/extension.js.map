{"version":3,"file":"extension.js","mappings":"sFAQO,MAAMA,EAAa,aAAAC,QAAQC,SAASC,WAAW,OACzCC,EAAS,SAAoB,UAApBH,QAAQC,SACN,YAACF,IAAeI,EACH,gCACI,+BACD,4BACtC,wCACA,+BACA,mB,8DCRF,IAAYC,E,wbAAAA,CAAZ,QAEA,QACA,SACA,S,IACA,Q,IACA,Q,kLAEe,MAAMC,EAGnBC,cACEC,KAAKC,cAAgB,GACrBD,KAAKE,mBAAgBC,EACrBH,KAAKI,cAAgBN,EAAQO,gBAG7BL,KAAKC,cAAcK,KACjBC,EAAAA,QAAOC,UAAUC,4BAA4BT,KAAKU,aAAaC,KAAKX,QAI5D,aAACY,EAAWd,EAAQO,iBAC9B,MAAMQ,EAASN,EAAAA,QAAOO,OAAOC,iBACzBR,EAAAA,QAAOO,OAAOC,iBAAiBC,gBAC/Bb,EACJ,IACE,GAAIH,KAAKE,cAIP,OAHIF,KAAKI,gBAAkBQ,IACzBZ,KAAKE,cAAce,QAAQC,WAAalB,KAAKmB,kBAAkBP,IAE1DZ,KAAKE,cAAckB,OAAOP,GAEnC,MAAOQ,GACPC,QAAQC,KAAKF,GAEfrB,KAAKE,oBAAsBF,KAAKwB,SAASZ,GAG7B,eAACA,GACb,MAAMa,EAAQlB,EAAAA,QAAOO,OAAOY,mBAC1B,UACAC,EAAAA,UAAUC,qBAAqB,eAAgB,YAC/CrB,EAAAA,QAAOsB,WAAWC,IAClB,CACEC,eAAe,EACfC,yBAAyB,IAG7BhC,KAAKC,cAAcK,KAAKmB,EAAMQ,aAAajC,KAAKkC,gBAAgBvB,KAAKX,QACrEyB,EAAMU,SAAW5B,EAAAA,QAAO6B,IAAIC,KAC1BC,EAAAA,QAAKC,KACHZ,EAAAA,UAAUa,QAAQC,cAClB,YACA,6BAGJhB,EAAMR,QAAQC,KAAOlB,KAAK0C,oBAC1B,IACEjB,EAAMR,QAAQC,WAAalB,KAAKmB,kBAAkBP,GAClD,MAAOS,GACFA,EAAIsB,WAAWC,SAAS,yBAC3B,IAAAC,aAAY,wBAAyBxB,GAGzC,OAAOI,EAGTqB,WAEE,QADkBvC,EAAAA,QAAOC,UAAUuC,iBAAiB,cAAgB,IAClDC,YAAc,IAAIC,cAAcL,SAAS,SACvD,QACA,OAGNF,oBAEE,MAAQ,6EAEmC,UAH7B1C,KAAK8C,WAGkC,OAAS,4FAMzC,wBAAClC,GACtBZ,KAAKI,cAAgBQ,QACff,EAAeqD,KAAKC,oBAAoB,CAC5CC,KAAMzB,EAAAA,UAAU0B,WAAW,yBAC3BC,KAAM3B,EAAAA,UAAU0B,WAAW,yBAC3BE,aAAcC,MAAOC,EAASC,KAC5B,GAAgB,iBAAZD,EACE9B,EAAAA,UAAUgC,mBACZhC,EAAAA,UAAUgC,kBAAkBC,qBAC1BrD,EAAAA,QAAO6B,IAAIC,KAAKqB,GAAQG,OACxB,iBACA1D,GAGJH,KAAKU,eACDH,EAAAA,QAAOC,UAAUsD,iBACnBvD,EAAAA,QAAOC,UAAUuD,uBACfxD,EAAAA,QAAOC,UAAUsD,iBAAiBE,OAClC,KACA,CAAEC,IAAK1D,EAAAA,QAAO6B,IAAIC,KAAKqB,KAGzBnD,EAAAA,QAAO2D,SAASC,eACd,oBACA5D,EAAAA,QAAO6B,IAAIC,KAAKqB,IAGpBnD,EAAAA,QAAO2D,SAASC,eAAe,gCAC1B,GAAgB,uBAAZV,EAAkC,CAC3C,MAAMW,QAAe7D,EAAAA,QAAOO,OAAOuD,iBACjC9D,EAAAA,QAAO6B,IAAIC,KAAKqB,EAAOpB,OAEnBgC,EAAe,IAAI/D,EAAAA,QAAOgE,UAC7Bb,EAAOc,MAAQ,GAAK,GACpBd,EAAO7C,QAAU,GAAK,GAEzBuD,EAAOK,UAAY,IAAIlE,EAAAA,QAAOmE,UAAUJ,EAAcA,GACtDF,EAAOO,YACL,IAAIpE,EAAAA,QAAOqE,MAAMN,EAAcA,GAC/B/D,EAAAA,QAAOsE,qBAAqBC,cAKpC,MAAMC,EAAQ/E,KAAK8C,WACnB,MAAQ,iOAOUlD,EAAAA,kUAUJ,UAAVmF,EAAoB,OAAS,qCAEdlF,EAAeqD,KAAK8B,eAAe,CAChDC,MAAOrE,EACPmE,MAAAA,EACAvE,UAAWmB,EAAAA,UAAUC,qBAAqB,0OAWlDM,kBACElC,KAAKE,mBAAgBC,EAGvBO,eACOV,KAAKE,gBAGVF,KAAKE,cAAcgF,UACnBlF,KAAKE,mBAAgBC,GAGvB+E,UACElF,KAAKU,eACLb,EAAesF,KAAKC,qBAAqBpF,KAAKC,eAC9CJ,EAAeqD,KAAKmC,kB,UA1KHvF,EAAAA,EACZO,gBAAkB,K,+DCT3B,IAAYR,E,wbAAAA,CAAZ,QAEA,Q,IACA,Q,IACA,Q,IACA,Q,4LAEe,MAKbE,YAAYuF,EAAaC,GAAqB,GAAO,KAJrDC,aAAe,IAIsC,KAHrDC,SAAW,gCAG0C,KAFrDC,kBAAoB,iCAGlB1F,KAAKsF,YAAcA,EACnBtF,KAAK2F,aAAe,IAAIC,EAAAA,QAAaN,EAAatF,KAAK0F,mBAEvD,MAAMG,EAAStF,EAAAA,QAAOC,UAAUuC,iBAAiB,kBACjD/C,KAAK8F,OAAS,CACZ,IAAIjG,EAAekG,UAAUC,oBAC3BhG,KAAK2F,aACL3F,KAAKiG,kBAAkBtF,KAAKX,MAC5B,CACEkG,mBAAoBC,EAAAA,sBACpBC,iBAAkBP,EAAOQ,IAAI,oBAC7BC,kBAAmBT,EAAOQ,IAAI,qBAC9BE,sBAAuBV,EAAOQ,IAAI,yBAClCG,aAAc,IAAIC,EAAAA,QAClBlB,mBAAoBA,KAM5BU,oBAEMjG,KAAK0G,UACP1G,KAAK2G,OAITA,OACE,OAAO3G,KAAKsF,YAAYsB,OAAO5G,KAAKyF,UAAU,IAAIoB,MAAOC,WAG3DC,SACE,OAAO/G,KAAKsF,YAAYsB,OAAO5G,KAAKyF,cAAUtF,GAGhDuG,SACE,MAAMM,EAAWhH,KAAKsF,YAAYe,IAAIrG,KAAKyF,UAC3C,QAAKuB,IAGE,IAAIH,MAAOC,UAAYG,SAASD,IAAahH,KAAKwF,aAGhD,cACT,IAAI0B,GAAS,EACb,IAAK,MAAMC,KAASnH,KAAK8F,OACvB,UACcqB,EAAMC,UAChBF,GAAS,GAEX,MAAO7F,GACP6F,GAAS,EACT5F,QAAQC,KAAKF,GAGjB,OAAO6F,EAGI,cAACG,GACZ,MAAMC,EAAsB,IAAMtH,KAAK8F,OAAO9B,OAC9C,IAAK,MAAMmD,KAASnH,KAAK8F,aACjBqB,EAAMI,SAAQ,CAACC,EAASC,KAC5BJ,EAASK,OAAO,CACdF,QAAAA,EACAC,UAAWH,GAAuBG,EAAY,UAIpDJ,EAASK,OAAO,CAAEF,QAAS,mCAAoCC,UAAW,MAG5EE,UACE,OAAO3H,KAAK8F,OAAO8B,KAAKT,GAAUA,EAAMQ,e,+DCrF5C,I,IAAA,M,IACA,Q,6DAEe,MAAmB,mBAChCE,iBAAmB,EADa,KAEhCC,aAAe,EAFiB,KAGhCC,iBAAmB,EAEP,eACV,MAAMC,QAAqBzH,EAAAA,QAAOO,OAAOmH,uBACvC,kHACA,CAAEC,MAAO,iBAAkBC,mBAAmB,GAC9C,CAAED,MAAO,gBAAiBC,mBAAmB,GAC7C,CAAED,MAAO,YAAaC,mBAAmB,GACzC,CAAED,MAAO,oCAAqCC,mBAAmB,IAGnE,IACIC,EADAlB,EAAS,CAAEmB,OAAQrI,KAAK6H,kBAE5B,OAAQG,EAAeA,EAAaE,WAAQ/H,GAC1C,IAAK,iBACHI,EAAAA,QAAO2D,SAASC,eACd,cACA5D,EAAAA,QAAO6B,IAAIkG,MACT,wEAGJ,MACF,IAAK,gBACHF,QAAyB7H,EAAAA,QAAOO,OAAOyH,aAAa,CAClDC,OAAQ,uDACRC,YAAa,iCACbC,cAAgBC,GACbC,EAAAA,QAAGC,WAAWF,GAAgD,KAAvC,uCAExBP,IACFlB,EAAS,CACPmB,OAAQrI,KAAK+H,iBACbK,iBAAAA,IAGJ,MACF,IAAK,oCACHlB,EAAS,CAAEmB,OAAQrI,KAAK8H,cAI5B,OAAOZ,K,6FCoSJ,SAAkB1E,GAEvB,OADAb,EAAUmH,SAAStG,GACZb,G,aAGF,WACLA,EAAUoH,aACVC,EAASD,cA1VX,IAAY5D,EAAAA,EAAZ,QACYtF,EAAAA,EAAZ,QACYmJ,EAAAA,EAAZ,QACYC,EAAAA,EAAZ,Q,IAEA,Q,IACA,O,IACA,Q,IACA,Q,IACA,QACA,Q,IACA,Q,IACA,M,IACA,Q,gnBAoUO,MAAMtH,EAAY,gBAlUzB,MACE5B,cACEC,KAAKwC,aAAUrC,EACfH,KAAKkJ,aAAU/I,EACfH,KAAKmJ,aAAUhJ,EACfH,KAAK2D,uBAAoBxD,EACzBH,KAAKC,cAAgB,GAErBD,KAAKoJ,yBAAsBjJ,EAGf,eAACqC,GACbxC,KAAKwC,QAAUA,EACfxC,KAAK2F,aAAe,IAAIC,EAAAA,QAAapD,EAAQ8C,aAC7CtF,KAAKmJ,QAAU,IAAIrJ,EAAAA,QACnBE,KAAKkJ,QAAU,IAAIG,EAAAA,QAEnBrJ,KAAKC,cAAcK,KAAKN,KAAKmJ,QAASnJ,KAAKkJ,SAE3C,MAAMI,EAAgBC,EAAAA,QAAkBC,oBAAoBxF,OAAS,GAChEsF,GAAiBtJ,KAAKqD,WAAW,qCAMnC9C,EAAAA,QAAOC,UACLuC,iBAAiB,cACjB0G,IAAI,oCAEPlJ,EAAAA,QAAOC,UACJuC,iBAAiB,cACjB6D,OAAO,mCAAmC,GAG/C5G,KAAK0J,uBACC1J,KAAK2J,gBAAgBL,GAC3BtJ,KAAKC,cAAcK,KAAKN,KAAK4J,4CAE7BrJ,EAAAA,QAAO2D,SAASC,eAAe,aAAc,gBAAgB,GACF,mBAAhDnE,KAAK4B,qBAAqB,yBAC7B5B,KAAK4B,qBAAqB,iBAA1B5B,GAGRA,KAAKC,cAAcK,KACjBC,EAAAA,QAAOO,OAAO+I,yBACZ,qCACA,IAAIC,EAAAA,UAIR9J,KAAK+J,yBAEAT,GAKL/I,EAAAA,QAAO2D,SAASC,eAAe,aAAc,mBAAmB,GAEhEnE,KAAKgK,YACLhK,KAAKiK,YAAY,CACfC,eAAgBlK,KAAK4B,qBAAqB,2BAE5C5B,KAAK2D,kBAAoB,IAAI4F,EAAAA,QAC7BvJ,KAAKC,cAAcK,KAAKN,KAAK2D,mBAE7B3D,KAAKmK,eAELhF,EAAKiF,mBAAmBpK,KAAK2F,cAC7BR,EAAKkF,gCACLrK,KAAKC,cAAcK,KACjBC,EAAAA,QAAOO,OAAOwJ,6BAA6BlG,GACzCe,EAAKoF,iBAAiBnG,EAAQpE,KAAK2F,kBAnBrC3F,KAAKiK,YAAY,CAAEO,eAAgB,CAAC,8BAwBxCnH,WAAWoH,GACT,OAAOlK,EAAAA,QAAOC,UAAUuC,iBAAiB,kBAAkBsD,IAAIoE,GAGjEC,yBACE,MAAMC,EAAMpK,EAAAA,QAAOqK,WAAWC,IAAIC,MAC/BC,GACCA,EAAKN,GAAG9K,WAAW,gBACP,8BAAZoL,EAAKN,IACLM,EAAKC,WAET,OAAOL,GAAOA,EAAIM,QAAUN,EAAIM,QAAQC,cAAW/K,EAGrDyB,qBAAqB6I,EAAIU,GAIvB,OAHKnL,KAAKoJ,sBACRpJ,KAAKoJ,oBAAsBpJ,KAAK0K,0BAE9B1K,KAAKoJ,qBAAuBqB,KAAMzK,KAAKoJ,oBAClCpJ,KAAKoJ,oBAAoBqB,GAE3BU,EAGTzB,iBACE,MAAM0B,EAAY,CAChBC,eAAgBpC,EAAMqC,iBAGlBC,EAAahL,EAAAA,QAAOC,UAAUuC,iBAAiB,QAAQsD,IAAI,UAC7DkF,GAAe9L,QAAQ+L,IAAIC,YAAehM,QAAQ+L,IAAID,aACxDH,EAAS,WAAiBG,GAEvBhL,EAAAA,QAAOC,UAAUuC,iBAAiB,QAAQsD,IAAI,oBAEjD+E,EAAS,eAAqB,KAE5BG,GAAe9L,QAAQ+L,IAAIE,aAAgBjM,QAAQ+L,IAAIG,cACzDP,EAAS,YAAkBG,GAEzBvL,KAAKqD,WAAW,wBAClB+H,EAAS,cAAoBpL,KAAKqD,WAAW,uBAE/CxD,EAAe+L,KAAKlC,eAAe,CACjCmC,OAAQ,SACRC,UAAW9L,KAAKqD,WAAW,cAC3B+H,UAAAA,IAIgB,qBAAC7F,GACnB,MAAMwG,EAAK,IAAIC,EAAAA,QAAoBhM,KAAKwC,QAAQ8C,YAAaC,GAC7D,IAAIwG,EAAGrF,SAuBP,aAhBwBnG,EAAAA,QAAOO,OAAOmL,aACpC,CACEC,SAAU3L,EAAAA,QAAO4L,iBAAiBC,OAClClE,MAAO,eAET1E,MAAAA,IACE6D,EAASK,OAAO,CACdF,QAAS,6CAEX,IACE,aAAeuE,EAAG3E,QAClB,MAAO/F,IACT,OAAO,WAQEd,EAAAA,QAAOO,OAAOmL,aACzB,CACEC,SAAU3L,EAAAA,QAAO4L,iBAAiBE,aAClCnE,MAAO,yBAET1E,MAAAA,IACE6D,EAASK,OAAO,CACdF,QAAS,iCAEX,MAAM8E,EAAgB/L,EAAAA,QAAOO,OAAOyL,oBAClC,2BAEFD,EAAcE,OACdF,EAAcG,WAAW,gCACzBH,EAAcG,WACZ,gEAEFH,EAAcG,WACZ,kGAGFH,EAAcG,WACZ,8FAGF,IACEV,EAAGpF,aACGoF,EAAGxE,QAAQF,GACjBiF,EAAcG,WAAW,4CACzBH,EAAcG,WAAW,0BACzB,MAAMC,EAAS,mBACQnM,EAAAA,QAAOO,OAAOmH,uBACnC,uEACAyE,KAEeA,GACfnM,EAAAA,QAAO2D,SAASC,eAAe,iCAEjC,MAAO9C,GACPiL,EAAcG,WAAW,qCACzBxD,EAAMpG,YAAY,uBAAwBxB,GAf5C,QAiBE0K,EAAGhF,SAIL,OADAgF,EAAGpE,WACI,UAlDX,EAtBEpH,EAAAA,QAAOO,OAAOmH,uBACZ,0HA4EY,sBAEdjI,KAAKqD,WAAW,0BACfxD,EAAeqD,KAAKyJ,cAAc,WAIrCpM,EAAAA,QAAO2D,SAASC,eAAe,2BAGjC4F,yBACE/J,KAAKC,cAAcK,KACjBC,EAAAA,QAAO2D,SAAS0I,gBAAgB,2BAA4BhM,GAC1DZ,KAAKmJ,QAAQ0D,OAAOjM,KAEtBL,EAAAA,QAAO2D,SAAS0I,gBAAgB,8BAA8B,IAC5D5M,KAAKkJ,QAAQ4D,MAAMN,SAErBjM,EAAAA,QAAO2D,SAAS0I,gBAAgB,iCAAiC,IAC/D5M,KAAKkJ,QAAQ6D,SAAS,gBAExBxM,EAAAA,QAAO2D,SAAS0I,gBAAgB,iCAAiC,KAC/DrM,EAAAA,QAAO2D,SAASC,eAAe,wBAC/B5D,EAAAA,QAAO2D,SAASC,eAAe,qCAC/B5D,EAAAA,QAAO2D,SAASC,eAAe,mCAEjC5D,EAAAA,QAAO2D,SAAS0I,gBAAgB,mCAAmC,IACjE5M,KAAKkJ,QAAQ6D,SAAS,6BAExBxM,EAAAA,QAAO2D,SAAS0I,gBAAgB,kCAAkC,IAChE5M,KAAKkJ,QAAQ6D,SAAS,yBAExBxM,EAAAA,QAAO2D,SAAS0I,gBAAgB,6BAA6B,IAC3D5M,KAAKkJ,QAAQ6D,SAAS,gBAExBxM,EAAAA,QAAO2D,SAAS0I,gBAAgB,8BAA8B,IAC5D5M,KAAKkJ,QAAQ6D,SAAS,kBAK5B/C,YACEhB,EAASF,SAAS9I,KAAKwC,SAGzByH,aAAY,eAAEO,EAAF,eAAkBN,IACxBlK,KAAKqD,WAAW,mBAGpB,CACE,CAAC,UAAW,mBAAoB,2BAChC,CAAC,WAAY,oBAAqB,wBAClC,CAAC,iBAAkB,qBAAsB,yBACzC,CAAC,cAAe,oBAAqB,wBACrC,CAAC,UAAW,6BAA8B,gCAC1C,CAAC,cAAe,2BAA4B,+BAE3C2J,QACEjC,KACGP,GAAkBA,EAAe5H,SAASmI,EAAK,QAC/Cb,IAAmBA,EAAetH,SAASmI,EAAK,OAErDkC,UACAC,SAAQ,CAACnC,EAAMoC,KACd,MAAOC,EAAMC,EAAS5J,GAAWsH,EAC3BuC,EAAS/M,EAAAA,QAAOO,OAAOyM,oBAC3BhN,EAAAA,QAAOiN,mBAAmBC,KAC1BC,EAAAA,0BAA4BP,EAAQ,GAEtCG,EAAOF,KAAOA,EACdE,EAAOD,QAAUA,EACjBC,EAAO7J,QAAUA,EACjB6J,EAAOd,OACPxM,KAAKC,cAAcK,KAAKgN,MAI9B1D,2CACE,OAAOrJ,EAAAA,QAAOC,UAAUmN,0BAA0BC,IAChD,IACGA,EAAEC,qBAAqB,0CACvB7N,KAAKqD,WAAW,qBAEjB,OAEF,MAAMyK,EAASjO,EAAekO,KAAKC,YAC9BF,GAAWlF,EAAAA,QAAGqF,gBAAgBH,KAGnCjO,EAAeqD,KAAKmC,iBAWpB6I,YAVmB,KACjB,IACEtF,EAAAA,QAAGuF,WAAWL,GACd,MAAOzM,GACPC,QAAQC,KAAKF,GAEfd,EAAAA,QAAOO,OAAOmH,uBACZ,iDAGmB,SAI3BmG,4BACE7N,EAAAA,QAAO2D,SAASC,eAAe,aAAc,gBAAgB,GAC7DtE,EAAesF,KAAKC,qBAAqBpF,KAAKC,eAGhD8I,aACE/I,KAAKoO,+B,oFC1UF5K,eAAkCmC,GACvC,MAAM0I,EAAW,iBAEjB,IAAIC,EAAQ3I,EAAa4I,SAASF,GAClC,GAAIC,GAASA,EAAME,KACjB,OASF,GARYF,GAAUA,EAAMG,cAC1BH,EAAQ,CACNG,YAAa,EACbD,MAAM,IAIVF,EAAMG,aAAe,EACjBH,EAAMG,YAZkB,GAc1B,YADA9I,EAAa+I,SAASL,EAAUC,GAIlC,MAAMtG,QAAqBzH,EAAAA,QAAOO,OAAOmH,uBACvC,2JAEA,CAAEC,MAAO,gCAAiCC,mBAAmB,GAC7D,CAAED,MAAO,eAAgBC,mBAAmB,GAC5C,CAAED,MAAO,aAAcC,mBAAmB,IAG5C,OAAQH,EAAeA,EAAaE,WAAQ/H,GAC1C,IAAK,gCACHI,EAAAA,QAAO2D,SAASC,eACd,cACA5D,EAAAA,QAAO6B,IAAIkG,MAAM,kCAEnBgG,EAAME,MAAO,EACb,MACF,IAAK,aACHF,EAAME,MAAO,EACb,MACF,QACEF,EAAMG,YAAc,EAExB9I,EAAa+I,SAASL,EAAUC,I,gCAG3B9K,iBACL,MAAMmL,EAAapO,EAAAA,QAAOqK,WAAWC,IAAImC,QACtCrC,GAAQA,EAAIK,UAAY4D,EAAAA,yBAAyBhM,SAAS+H,EAAIF,MAEjE,GAA0B,IAAtBkE,EAAW3K,OACb,OAEF,MAAMgE,QAAqBzH,EAAAA,QAAOO,OAAO+N,mBACtC,kEAAiEF,EAC/D/G,KAAK+C,GAAQA,EAAImE,YAAYC,aAAepE,EAAIF,KAChDlI,KAAK,uIAGR,CAAE2F,MAAO,eAAgBC,mBAAmB,GAC5C,CAAED,MAAO,uBAAwBC,mBAAmB,GACpD,CAAED,MAAO,eAAgBC,mBAAmB,IAE9C,OAAQH,EAAeA,EAAaE,WAAQ/H,GAC1C,IAAK,eACHI,EAAAA,QAAO2D,SAASC,eACd,cACA5D,EAAAA,QAAO6B,IAAIkG,MAAM,mDAEnB,MACF,IAAK,uBACHqG,EAAWzB,SAASvC,IAClBpK,EAAAA,QAAO2D,SAASC,eACd,0CACAwG,EAAIF,OAGRlK,EAAAA,QAAO2D,SAASC,eAAe,mC,mBAK9BX,eAAgCY,EAAQuB,GAC7C,IAAKvB,IAAWA,EAAO4K,WAAa5K,EAAO4K,SAASC,SAClD,OAEF,IAAK7K,EAAO4K,SAASC,SAASC,SAAS,QACrC,OAEF,MAAMb,EAAW,oBACjB,GAAI1I,EAAa4I,SAASF,GACxB,OAGF,MAAMrG,QAAqBzH,EAAAA,QAAOO,OAAO+N,mBACvC,oMAGA,CAAE3G,MAAO,mBAAoBC,mBAAmB,GAChD,CAAED,MAAO,oBAAqBC,mBAAmB,GACjD,CAAED,MAAO,eAAgBC,mBAAmB,IAE9C,OAAQH,EAAeA,EAAaE,WAAQ/H,GAC1C,IAAK,mBACHI,EAAAA,QAAO2D,SAASC,eACd,cACA5D,EAAAA,QAAO6B,IAAIkG,MAAM,0BAEnB,MACF,IAAK,oBACH3C,EAAa+I,SAASL,EAAU,KA/GtC,I,EAAA,Q,KACA,S,2FCDA,IAAYxO,E,wbAAAA,CAAZ,Q,IAEA,QACA,Q,IACA,QACA,S,IACA,QACA,S,IACA,Q,IACA,Q,kLAEe,MAAM0J,EACnBxJ,cACEC,KAAKmP,iBAAmB,IAAIvJ,EAAAA,QAAajE,EAAAA,UAAUa,QAAQ8C,YAAa,YACxEtF,KAAKoP,kBAAejP,EACpBH,KAAKqP,oBAAiBlP,EACtBH,KAAKsP,MAAQ,IAAIzP,EAAe0P,QAAQC,YAAY,CAClDC,IAAK,SACLC,IAAK,CACHC,wBAAyBpP,EAAAA,QAAOC,UAAUmP,wBAC1CC,uBAAyBC,GACvBtP,EAAAA,QAAOC,UAAUmP,wBAAwBrN,EAAAA,QAAKC,KAAKsN,EAAK,MAC1DC,4BAA8BC,GAC5BxP,EAAAA,QAAOO,OAAOmL,aACZ,CACEC,SAAU,CAAE8D,OAAQzP,EAAAA,QAAO4L,iBAAiBC,QAC5ClE,MAAO,6CAET6H,GAEJE,yBAA2BF,GACzBxP,EAAAA,QAAOO,OAAOmL,aACZ,CACEC,SAAU,CAAE8D,OAAQE,EAAAA,QAAmBC,iBAEzC3M,eACQjD,EAAAA,QAAOO,OAAOmL,aAClB,CACEC,SAAU,CAAE8D,OAAQzP,EAAAA,QAAO4L,iBAAiBC,QAC5ClE,MAAO,gCAET6H,KAGRK,yBAA2BC,IACrBrQ,KAAKoP,cAAgBpP,KAAKoP,aAAaiB,aAAeA,GACxDrQ,KAAKoP,aAAakB,iBAEpBtQ,KAAKuQ,0BAEPC,iBAAkB3N,EAAAA,YAAYlC,KAAKX,OAErCkL,SAAU,CACRuF,oBAAqB9O,EAAAA,UAAU0B,WAAW,uBAC1CqN,YAAa/O,EAAAA,UAAU0B,WAAW,mCAItCrD,KAAKC,cAAgB,CACnBD,KAAKsP,MACL/O,EAAAA,QAAOO,OAAOwJ,6BAA4B,KACxC,IAAK3I,EAAAA,UAAU0B,WAAW,qCACxB,OAEF,MAAMgN,EAAarQ,KAAK2Q,4BACpBN,GACFrQ,KAAK4Q,gBAAgBP,MAGzB9P,EAAAA,QAAOC,UAAUC,6BAA4B,IAC3CT,KAAK4Q,gBAAgB5Q,KAAK6Q,0BAE5BtQ,EAAAA,QAAO2D,SAAS0I,gBAAgB,sCAAsC,IACpE5M,KAAKsP,MAAMwB,oBAAoBC,aAAa,CAAEC,OAAO,MAEvDzQ,EAAAA,QAAO2D,SAAS0I,gBAAgB,sCAAsC,IACpE5M,KAAKoP,aAAa6B,QAAQ,CAAED,OAAO,MAErCzQ,EAAAA,QAAO2D,SAAS0I,gBAAgB,iCAAkCmD,GAChE/P,KAAKoP,aAAa8B,QAAQnB,MAI9B/P,KAAKmR,sBAELnR,KAAK4Q,gBAAgB5Q,KAAK6Q,wBAG5B3L,UACErF,EAAesF,KAAKC,qBAAqBpF,KAAKC,eAGzB,wBAACoQ,GACtB,IAEE,OADAzH,EAAAA,QAAGwI,WAAW9O,EAAAA,QAAKC,KAAK8N,EAAY,oBAC7B,EACP,MAAOhP,IACT,OAAO,EAGe,2BACtB,OAAQd,EAAAA,QAAOC,UAAUsD,kBAAoB,IAC1C8D,KAAKyJ,GAAWA,EAAOpN,IAAIJ,SAC3BmJ,QAAQqD,GAAe9G,EAAkB+H,iBAAiBjB,KAG/DQ,uBACE,IAAIR,EAIJ,OAHI1O,EAAAA,UAAU0B,WAAW,uCACvBgN,EAAarQ,KAAK2Q,6BAEbN,GAAcrQ,KAAKuR,wBAG5BA,wBACE,MAAMC,EAAiBjI,EAAkBC,oBACnCiI,EAAmBzR,KAAKsP,MAAMoC,sBACpC,GAAIF,EAAexN,OAAS,EAC1B,OAEF,GACEyN,GACAD,EAAe1G,MAAMuF,GAAeA,IAAeoB,IAEnD,OAAOA,EAET,MAAME,EAAgB3R,KAAKmP,iBAAiBZ,SAAS,kBACrD,OACEoD,GACAH,EAAe1G,MAAMuF,GAAeA,IAAesB,IAE5CA,EAEFH,EAAe,GAGxBb,4BAEE,GADuBpH,EAAkBC,oBACtBxF,OAAS,EAC1B,OAEF,MAAMI,EAAS7D,EAAAA,QAAOO,OAAOC,iBAC7B,IAAKqD,EACH,OAEF,MAAMwN,EAAWxN,EAAO4K,SAAS/K,IACjC,GAAwB,SAApB2N,EAASC,OACX,OAEF,MAAMR,EAAS9Q,EAAAA,QAAOC,UAAUsR,mBAAmBF,GACnD,OAAKP,GAAW9H,EAAkB+H,iBAAiBD,EAAOpN,IAAIJ,QAIvDwN,EAAOpN,IAAIJ,YAJlB,EAOFkO,qBAAqB1B,EAAY2B,GAE/B,QADchS,KAAKmP,iBAAiBZ,SAAS,aAAe,IAAI8B,IAAe,IACnE2B,GAGdpO,qBAAqByM,EAAY2B,EAAMrJ,GACrC,MAAMsJ,EAAWjS,KAAKmP,iBAAiBZ,SAAS,aAAe,GAC1D0D,EAAS5B,KACZ4B,EAAS5B,GAAc,IAEzB4B,EAAS5B,GAAY2B,GAAQrJ,EAG7B,IAAK,MAAMuJ,KAAOC,OAAOC,KAAKH,GACxB1I,EAAkB+H,iBAAiBY,WAGhCD,EAASC,GAGlBlS,KAAKmP,iBAAiBT,SAAS,WAAYuD,GAC3CjS,KAAKmP,iBAAiBT,SAAS,iBAAkB2B,GAGnDE,yBACE,MAAM8B,EAAWrS,KAAKsP,MAAMwB,oBACvBuB,GAGLrS,KAAK4D,qBACHyO,EAAShC,WACT,YACAgC,EAASC,oBAIQ,sBAACjC,EAAYkC,EAAU,IAC1C,IAAKlC,EAEH,YADA/O,QAAQkR,MAAM,kDAKhB,IAAIC,EACAC,EAHJ1S,KAAKqP,eAAejC,KAAO,4BAIvBpN,KAAKsP,MAAMwB,sBACb2B,EAAoBzS,KAAKsP,MAAMwB,oBAAoBT,WACnDqC,EAAiB1S,KAAKsP,MAAMwB,oBAAoBwB,oBAGlD,MAAMD,EAAWrS,KAAKsP,MAAMqD,YAAYtC,GACpC,YAAakC,QACTF,EAASO,iBAAiBL,EAAQM,SAC9BR,EAASC,0BACbD,EAASO,iBACb5S,KAAK+R,qBAAqB1B,EAAY,cAMvCoC,GACDA,IAAsBpC,GACtBqC,IAAmBL,EAASC,qBAE5BtS,KAAKsP,MAAMwD,OAAOzC,GAEdrQ,KAAKoP,eACPpP,KAAKoP,aAAalK,UAClBlF,KAAKoP,kBAAejP,GAEtBH,KAAKoP,aAAe,IAAIc,EAAAA,QAAmBG,EAAYgC,GAIT,IAA5C9R,EAAAA,QAAOO,OAAOiS,mBAAmB/O,QACjCrC,EAAAA,UAAU0B,WAAW,8BAErB9C,EAAAA,QAAOO,OAAOuD,iBACZ9D,EAAAA,QAAO6B,IAAIC,KAAKC,EAAAA,QAAKC,KAAK8N,EAAY,qBAK5CrQ,KAAKgT,oBACLhT,KAAKuQ,yBAGPY,sBACEnR,KAAKqP,eAAiB9O,EAAAA,QAAOO,OAAOyM,oBAClChN,EAAAA,QAAOiN,mBAAmBC,KAC1BC,EAAAA,2BAEF1N,KAAKqP,eAAehC,QAAU,wCAC9BrN,KAAKqP,eAAe5L,QAAU,kCAC9BzD,KAAKqP,eAAejC,KAAO,4BAC3BpN,KAAKqP,eAAe7C,OAEpBxM,KAAKC,cAAcK,KACjBN,KAAKqP,eACL9O,EAAAA,QAAO2D,SAAS0I,gBAAgB,mCAAmC,IACjE5M,KAAKiT,oBAKXD,oBACE,MAAMX,EAAWrS,KAAKsP,MAAMwB,oBAC5B,IAAKuB,EACH,OAEF,MAAMQ,EAAUR,EAASC,mBACpB,OAAMD,EAASC,qBAChB,UACJtS,KAAKqP,eAAejC,KAAQ,kBAAiByF,MAAYvQ,EAAAA,QAAK4Q,SAC5Db,EAAShC,eAIO,uBAClB,MAAM8C,EAAQ,GACd,IAAK,MAAM9C,KAAc9G,EAAkBC,oBAAqB,CAC9D,MAAM6I,EAAWrS,KAAKsP,MAAMqD,YAAYtC,GAClC+C,QAAaf,EAASgB,iBAC5B,IAAKD,IAASA,EAAKpP,OACjB,SAEF,MAAMsP,EAAmB,GAAEhR,EAAAA,QAAK4Q,SAC9B5Q,EAAAA,QAAKiR,QAAQlD,OACV/N,EAAAA,QAAK4Q,SAAS7C,KACnB8C,EAAM7S,KAAK,CACT+P,WAAAA,EACAmD,MAAO,UACPC,YAAc,aAAYH,6CAE5BH,EAAM7S,QACD8S,EAAKxL,KAAKmD,IAAD,CACVsF,WAAAA,EACAwC,QAAS9H,EAAKiH,KACdwB,MAAQ,OAAMzI,EAAKiH,OACnByB,YAAc,aAAYH,SAIhC,MAAMI,QAAmBnT,EAAAA,QAAOO,OAAO6S,cAAcR,EAAO,CAC1DS,oBAAoB,IAEjBF,GAGL1T,KAAK4Q,gBAAgB8C,EAAWrD,WAAY,CAAEwC,QAASa,EAAWb,W,UAxSjDtJ,G,+DCXrB,IAAYhJ,E,wbAAAA,CAAZ,Q,+HAEe,MAAMsT,EAGnB9T,YAAY0K,EAAI2I,EAAMU,EAAOC,GAC3B/T,KAAKyK,GAAKA,EACVzK,KAAKoT,KAAOA,EACZpT,KAAK8T,MAAQA,EACb9T,KAAK+T,cAAgBA,EACrB/T,KAAKgU,gBAAkBhU,KAAKoT,KAAKpP,OAAS,EAG5CiQ,YAAYlJ,GACV,OAAOA,aAAgBxK,EAAO2T,SAAWnJ,EAAO/K,KAAKmU,eAAepJ,GAGtEoJ,eAAepE,GACb,MAAMqE,EAAW,IAAI7T,EAAO2T,SAASnE,EAAKiC,MAW1C,OAVAoC,EAASjS,SAAW,IAAI5B,EAAO8T,UAAU,kBACzCD,EAAS/G,QAAU0C,EAAK7H,MACxBkM,EAAS3Q,QAAU,CACjByE,MAAO6H,EAAK7H,MACZzE,QAAS,gCACT6Q,UAAW,CAACvE,KAETA,EAAKwE,SAAWxE,EAAKyE,UAAYxU,KAAKgU,kBACzCI,EAASZ,OAAS,QAEbY,EAGTK,YAAYC,GACV,OAAIA,GAAWA,EAAQC,MACd3U,KAAK4U,oBAAoBF,EAAQlJ,IAAKkJ,EAAQC,OAC5CD,EACF1U,KAAK6U,eAAeH,EAAQlJ,KAE9BxL,KAAK8U,kBAGdA,kBACE,MAAM5N,EAAS,GACf,IAAK,MAAM2L,IAAW,MAAC1S,KAAcH,KAAKoT,KAAKxL,KAAKmD,GAASA,EAAKiH,QAAQ,CACxE,MAAMoC,EAAW,IAAI7T,EAAO2T,SAC1BrB,GAAWgB,EAAyBkB,kBACpClC,GAAYA,IAAY7S,KAAK+T,eAAkB/T,KAAKgU,gBAEhDzT,EAAOyU,yBAAyBC,UADhC1U,EAAOyU,yBAAyBE,UAGtCd,EAAS3J,GAAM,GAAEzK,KAAKyK,MAAMoI,IAC5BuB,EAAS5I,IAAMqH,EACfuB,EAASjS,SAAW,IAAI5B,EAAO8T,UAAU,eACzCnN,EAAO5G,KAAK8T,GAEd,OAAOlN,EAGT0N,oBAAoBpJ,EAAKmJ,GACvB,OAAO3U,KAAK8T,MAAM9G,QAAQ+C,GAASA,EAAKwE,UAAY/I,GAAOuE,EAAK4E,QAAUA,IAG5EE,eAAerJ,GACb,MAAM2J,EAAWnV,KAAK8T,MAAM9G,QAAQ+C,GAASA,EAAKwE,UAAY/I,IAC9D,IAAK2J,EAASnR,OACZ,MAAO,CAAC,IAAIzD,EAAO2T,SAAS,eAE9B,MAAMhN,EAASiO,EAASnI,QAAQ+C,IAAUA,EAAK4E,QAE/C,IAAK,MAAMA,KAAS3U,KAAKoV,cAAcD,GAAW,CAChD,MAAMT,EAAU,IAAInU,EAAO2T,SACzBS,EACA,CAAC,UAAW,YAAY/R,SAAS+R,GAC7BpU,EAAOyU,yBAAyBE,SAChC3U,EAAOyU,yBAAyBC,WAEtCP,EAAQlJ,IAAMA,EACdkJ,EAAQC,MAAQA,EAChBD,EAAQvS,SAAW5B,EAAO8T,UAAUgB,OACpCnO,EAAO5G,KAAKoU,GAEd,OAAOxN,EAGTkO,cAActB,GACZ,MAAM5M,EAAS,CAAC,WACVoO,EAAaxB,EAAM9G,QAAQ+C,GAASA,EAAK4E,QAAO/M,KAAKmI,GAASA,EAAK4E,QAErEW,EAAW1S,SAAS,aACtBsE,EAAO5G,KAAK,YAEd,IAAK,MAAMqU,KAASW,EACbpO,EAAOtE,SAAS+R,IACnBzN,EAAO5G,KAAKqU,GAGhB,OAAOzN,G,UA9FU2M,EAAAA,EACZkB,iBAAmB,W,+DCH5B,IAAYlV,E,wbAAAA,CAAZ,QAEA,Q,IACA,QACA,S,IACA,Q,kLAEe,MAAMqQ,EAKnBnQ,YAAYsQ,EAAYkF,GACtBvV,KAAKqQ,WAAaA,EAClBrQ,KAAKuV,gBAAkBA,EACvBvV,KAAKC,cAAgB,GAErBD,KAAKwV,KAAOC,KAAKC,SACjB1V,KAAK2V,qBAAkBxV,EACvBH,KAAK4V,0BAAuBzV,EAC5BH,KAAK6V,gBAAkB,GAEvB7V,KAAKiR,UAGP/L,UACErF,EAAesF,KAAKC,qBAAqBpF,KAAKC,eAGhDqQ,iBACMtQ,KAAK2V,iBACPG,aAAa9V,KAAK2V,iBAEpB3V,KAAK2V,gBAAkBzH,WACrBlO,KAAKiR,QAAQtQ,KAAKX,MAClBkQ,EAAmB6F,oBAIV,eAAC,MAAE/E,GAAQ,GAAU,IAChChR,KAAKkF,UAED8L,IACFhR,KAAKuV,gBAAgBS,aACrBhW,KAAKwV,KAAOC,KAAKC,UAGnB,MAAMO,QAAoBjW,KAAKuV,gBAAgBlC,iBACzC6C,EAAe,UAAWlW,KAAKuV,gBAAgBY,mBACrD,IAAK,MAAMpL,KAAQkL,EACjBC,EAAa5V,cACAN,KAAKuV,gBAAgBa,kBAAkBrL,EAAKiH,OAAU,IAIrE,MAAMqE,EAAa9V,EAAAA,QAAOO,OAAOwV,eAAepG,EAAmBC,cAAe,CAChFoG,iBAAkB,IAAI1C,EAAAA,QACpB7T,KAAKwV,KACLS,EACAC,EACAlW,KAAKuV,gBAAgBjD,oBAEvBkE,iBAAiB,IAGnBxW,KAAKC,cAAcK,KACjB+V,EAGAA,EAAWI,oBAAmBjT,OAASkR,QAAAA,MACjCA,EAAQlJ,WACJxL,KAAK0W,qBAAqBhC,EAAQlJ,QAK5CjL,EAAAA,QAAOuT,MAAM6C,qBAAqBzG,EAAmB0G,cAAe,CAClEC,aAAcrT,SAAY0S,EAAatO,KAAKmI,GAAS/P,KAAK8W,aAAa/G,KACvEgH,YAAa,SAKfxW,EAAAA,QAAOuT,MAAMkD,qBAAqBC,GAAUjX,KAAKgX,oBAAoBC,MAGvEjX,KAAKkX,0BAA0BhB,GAC/B3V,EAAAA,QAAO2D,SAASC,eACd,aACA,qBACA8R,EAAYjS,OAAS,GAIC,2BAACgO,GACzB,UAAUhS,KAAKuV,gBAAgBa,kBAAkBpE,GAIjD,aADMhS,KAAKuV,gBAAgB4B,aAAanF,GACjChS,KAAKsQ,iBAGdwG,aAAaM,GACX,MAAMC,EAAWlF,OAAOmF,OAAO7X,QAAQ+L,KACnC/L,QAAQ+L,IAAI+L,kBACdF,EAASG,KAAO/X,QAAQ+L,IAAI+L,gBAC5BF,EAASI,KAAOhY,QAAQ+L,IAAI+L,iBAE9B,MAAMG,EAAa,IAAInX,EAAAA,QAAOoX,KAC5B,CACEC,KAAM1H,EAAmB0G,cACzB7G,KAAMqH,EAAY3M,IAEpBlK,EAAAA,QAAOC,UAAUsR,mBAAmBvR,EAAAA,QAAO6B,IAAIC,KAAKrC,KAAKqQ,aACzD+G,EAAYlP,MACZgI,EAAmB0G,cACnB,IAAIrW,EAAAA,QAAOsX,iBACTrY,EAAAA,WAAa,iBAAmB,aAChC4X,EAAYU,KACZ,CACEC,IAAK/X,KAAKqQ,WACV7E,IAAK6L,IAGT,eAYF,OAVAK,EAAWM,oBAAsB,CAC/BvW,MAAOlB,EAAAA,QAAO0X,cAAcC,WAE1Bd,EAAYe,UACdT,EAAW/C,MAAQpU,EAAAA,QAAO6X,UAAUC,MAC3BjB,EAAYkB,UACrBZ,EAAW/C,MAAQpU,EAAAA,QAAO6X,UAAUG,MAC3BnB,EAAYoB,WACrBd,EAAW/C,MAAQpU,EAAAA,QAAO6X,UAAUK,MAE/Bf,EAGTxG,QAAQnB,GACN/P,KAAK4V,0BAAuBzV,EAC5BH,KAAK6V,gBAAkB,GACvB7V,KAAK0Y,wBAAwB3I,GAG3B/P,KAAK6V,gBAAgB8C,MAAMC,GAAM5Y,KAAK6Y,uBAAuBD,MAC7D5Y,KAAK6Y,uBAAuB9I,IAI9BxP,EAAAA,QAAO2D,SAASC,eAAe,iCAAkC,CAC/DyT,KAAM1H,EAAmB0G,cACzB7G,KAAMA,EAAKtF,KAIfiO,wBAAwB3I,GACI,CACxBpO,EAAAA,UAAU0B,WAAW,0BACrB,CAAC,SAAU,QAAQsV,MAAMG,GAAQ/I,EAAK+H,KAAKlV,SAASkW,MAE/BC,OAAOpQ,GAAUA,MAGxC3I,KAAK4V,qBAAuB7F,EAC5BxP,EAAAA,QAAOuT,MAAMkF,eAAe9L,SAAS+J,IACnC,MAAM4B,EAAyB7Y,KAAK6Y,uBAAuB5B,EAAMlH,MAC/C,CAEhBkH,EAAMlH,KAAKkJ,WAAWrB,OAAS1H,EAAmB0G,eACjDK,EAAMlH,KAAKmJ,UAAUpB,KAAKlV,SAAS,WACpC5C,KAAKmZ,cAAcpJ,EAAMkH,EAAMlH,QAAU8I,GAE7BF,MAAMhQ,GAAUA,OAI5BkQ,GACA,CAAC,SAAU,WAAWE,OAAOD,GAAQ7B,EAAMlH,KAAKmJ,UAAUpB,KAAKlV,SAASkW,OAExE9Y,KAAK6V,gBAAgBvV,KAAK2W,EAAMlH,MAElCkH,EAAMmC,iBAIVpC,oBAAoBC,GACA,EACfjX,KAAK4V,qBACNqB,EAAMiC,UAAUnJ,KAAKkJ,WAAWrB,OAAS1H,EAAmB0G,cACzC,IAAnBK,EAAMoC,WAAmBrZ,KAAK6Y,uBAAuB5B,EAAMiC,UAAUnJ,MACrE/P,KAAKmZ,cAAcnZ,KAAK4V,qBAAsBqB,EAAMiC,UAAUnJ,OAElD4I,MAAMhQ,GAAUA,MAG9B3I,KAAK4V,0BAAuBzV,EAC5B+N,YAAW,KACT,KAAOlO,KAAK6V,gBAAgB7R,QAC1BzD,EAAAA,QAAOuT,MAAMwF,YAAYtZ,KAAK6V,gBAAgB0D,SAE/CtS,SAAStF,EAAAA,UAAU0B,WAAW,+BAGnCwV,uBAAuB9I,GACrB,MAAM+H,EAAO/H,EAAK+H,MAAQ/H,EAAKmJ,UAAUpB,KACzC,MAAO,CAAC,WAAY,SAAU,WAAWiB,OAAOD,GAAQhB,EAAKlV,SAASkW,KAGxEK,cAAcK,EAAOC,GACnB,OAAKD,GAAUC,GAGDD,EAAM1B,MAAQ0B,EAAMN,UAAUpB,SAC9B2B,EAAM3B,MAAQ2B,EAAMP,UAAUpB,MAHnC0B,IAAUC,EAOrBvC,0BAA0BpD,GACxB,MAAM4F,EAAY1H,IAChB,MAAMsD,EAAaxB,EAAM9G,QACtB+C,GACCA,EAAKiC,OAASA,GAAQjC,EAAKwE,UAAYvU,KAAKuV,gBAAgBjD,qBAEhEtS,KAAKkR,QAAQoE,EAAW,KAG1BtV,KAAKC,cAAcK,KACjBC,EAAAA,QAAO2D,SAAS0I,gBAAgB,wBAAwB,KACtD,GAAIjL,EAAAA,UAAU0B,WAAW,aACvB,OAAO9C,EAAAA,QAAO2D,SAASC,eACrB,iCACAxC,EAAAA,UAAU0B,WAAW,cAGzBqW,EAAS,YAEXnZ,EAAAA,QAAO2D,SAAS0I,gBAAgB,yBAAyB,IACvD8M,EACE/X,EAAAA,UAAU0B,WAAW,yBACjB,qBACA,YAGR9C,EAAAA,QAAO2D,SAAS0I,gBAAgB,uBAAuB,IAAM8M,EAAS,UACtEnZ,EAAAA,QAAO2D,SAAS0I,gBAAgB,wBAAwB,IAAM8M,EAAS,WACvEnZ,EAAAA,QAAO2D,SAAS0I,gBAAgB,gCAAgC,IAC9D8M,EAAS,aAEXnZ,EAAAA,QAAO2D,SAAS0I,gBAAgB,+BAA+B,IAC7D8M,EAAS,qB,UAnPIxJ,EAAAA,EACZ0G,cAAgB,aADJ1G,EAEZC,cAAgB,8BAFJD,EAGZ6F,mBAAqB,K,uECVf,MACbhW,YAAYuF,EAAa+I,EAAW,cAClCrO,KAAK2Z,aAAerU,EACpBtF,KAAK4Z,UAAYvL,EAGnBwL,WACE,IAEE,OADc7Z,KAAK2Z,aAAatT,IAAIrG,KAAK4Z,YACzB,GAChB,MAAOvY,GACP,MAAO,IAIXkN,SAAS2D,GACP,OAAQlS,KAAK6Z,YAAc,IAAI3H,GAGjCxD,SAASwD,EAAKvJ,GACZ,MAAMmR,EAAO9Z,KAAK6Z,WAClBC,EAAK5H,GAAOvJ,EACZ3I,KAAK2Z,aAAa/S,OAAO5G,KAAK4Z,UAAWE,M,+DCtB7C,I,OAAA,S,qCAEe,MACb/Z,cACEC,KAAK+Z,eAAY5Z,EAGnB2M,MACE,MAAMuK,EAAWlF,OAAOmF,OAAO7X,QAAQ+L,KAKvC,OAJI/L,QAAQ+L,IAAI+L,kBACdF,EAASG,KAAO/X,QAAQ+L,IAAI+L,gBAC5BF,EAASI,KAAOhY,QAAQ+L,IAAI+L,iBAEvBhX,EAAAA,QAAOO,OAAOkZ,eAAe,CAClChI,KAAM,iBACNxG,IAAK6L,IAITtK,SAASK,GACFpN,KAAK+Z,gBAA2C5Z,IAA9BH,KAAK+Z,UAAUE,aACpCja,KAAK+Z,UAAY/Z,KAAK8M,OAExB9M,KAAK+Z,UAAUhN,SAASK,GACxBpN,KAAK+Z,UAAUvN,OAGjBtH,UACMlF,KAAK+Z,WACP/Z,KAAK+Z,UAAU7U,UAEjBlF,KAAK+Z,eAAY5Z,K,6EC1BdqD,eAA2B0E,EAAO7G,GACvC,MAAMoS,EAAcpS,EAAI6Y,OAAS7Y,EAAIsB,WAC/BwX,EAAU,0NAQN5Z,EAAAA,QAAO6Z,wBACL9O,kBACF+O,EAAAA,QAAGzC,WAAWyC,EAAAA,QAAGC,cAAcD,EAAAA,QAAGE,wCAI1C9G,kBAGI+G,EAAY3a,EAAesF,KAAKsV,kBAAkBvS,EAAOiS,GAE/D,IAAIzN,EAAS,mBACR8N,EAAU5X,SAAS,gBACtB8J,EAAS,mCAGYnM,EAAAA,QAAOO,OAAO4Z,iBACnCjH,EAAYkH,UAAU,EAAG,KAAO,MAChCjO,KAEeA,GACfnM,EAAAA,QAAO2D,SAASC,eAAe,cAAe5D,EAAAA,QAAO6B,IAAIkG,MAAMkS,IAEjElZ,QAAQkR,MAAMnR,I,iBAGAuZ,E,gBAIAtP,EA7ChB,IAAYzL,E,wbAAAA,CAAZ,Q,IAEA,O,IACA,Q,kLAsCO,SAAS+a,IACd,OAAOra,EAAAA,QAAOqK,WAAWiQ,aAAa,6BAA6B/L,YAG9D,SAASxD,IACd,OAAOsP,IAAiBR,U,+DC9C1B,IAAY7Z,E,wbAAAA,CAAZ,Q,+HAEA,MAAMua,UAAkBva,EAAO2T,SAC7BnU,YAAYyT,EAAO/P,EAASqU,EAAMiD,EAAkBC,GAClDC,MAAMzH,EAAOuH,GACTtX,IACFzD,KAAKyD,QAAU,CACbyE,MAAOsL,EACP/P,QAAAA,EACA6Q,UAAWwD,IAGf9X,KAAKkb,eAAiBF,G,UAIX,MACbvG,YAAYC,GACV,OAAIA,GAAWA,EAAQwG,eACdxG,EAAQwG,eAEV,CACL,IAAIJ,EACF,gBACA3a,OACAA,EACAI,EAAOyU,yBAAyBE,SAChC,CACE,IAAI4F,EAAU,OAAQ,2BACtB,IAAIA,EAAU,cAAe,0BAA2B,CAAC,aACzD,IAAIA,EAAU,UAAW,0BAA2B,CAAC,aACrD,IAAIA,EAAU,2BAA4B,0BAA2B,CACnE,cAEF,IAAIA,EAAU,YAAa,0BAA2B,CAAC,eACvD,IAAIA,EAAU,SAAU,0BAA2B,CAAC,YACpD,IAAIA,EAAU,YAAa,0BAA2B,CAAC,eACvD,IAAIA,EAAU,UAAW,0BAA2B,CAAC,cAGzD,IAAIA,EACF,aACA3a,OACAA,EACAI,EAAOyU,yBAAyBE,SAChC,CACE,IAAI4F,EAAU,kBAAmB,iCACjC,IAAIA,EAAU,uBAAwB,uCAG1C,IAAIA,EACF,eACA3a,OACAA,EACAI,EAAOyU,yBAAyBE,SAChC,CACE,IAAI4F,EAAU,kBAAmB,0BAA2B,CAC1D,uBAEF,IAAIA,EAAU,mBAAoB,0BAA2B,CAC3D,uBAEF,IAAIA,EAAU,aAAc,+BAGhC,IAAIA,EACF,qBACA3a,OACAA,EACAI,EAAOyU,yBAAyBE,SAChC,CACE,IAAI4F,EAAU,sBAAuB,iCACrC,IAAIA,EAAU,oBAAqB,aACnC,IAAIA,EAAU,eAAgB,8BAC9B,IAAIA,EAAU,0BAA2B,iCAMjD7G,YAAYS,GACV,OAAOA,K,QCzFXyG,EAAOlQ,QAAUmQ,QAAQ,O,MCAzBD,EAAOlQ,QAAUmQ,QAAQ,Y,OCAzBD,EAAOlQ,QAAUmQ,QAAQ,O,QCAzBD,EAAOlQ,QAAUmQ,QAAQ,S,QCAzBD,EAAOlQ,QAAUmQ,QAAQ,4B,QCAzBD,EAAOlQ,QAAUmQ,QAAQ,4B,QCAzBD,EAAOlQ,QAAUmQ,QAAQ,YCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBrb,IAAjBsb,EACH,OAAOA,EAAaxQ,QAGrB,IAAIkQ,EAASE,EAAyBG,GAAY,CAGjDvQ,QAAS,IAOV,OAHAyQ,EAAoBF,GAAUL,EAAQA,EAAOlQ,QAASsQ,GAG/CJ,EAAOlQ,QClBWsQ,CAAoB,K","sources":["webpack://platformio-ide/./src/constants.js","webpack://platformio-ide/./src/home.js","webpack://platformio-ide/./src/installer/manager.js","webpack://platformio-ide/./src/installer/python-prompt.js","webpack://platformio-ide/./src/main.js","webpack://platformio-ide/./src/misc.js","webpack://platformio-ide/./src/project/observable.js","webpack://platformio-ide/./src/project/task-tree.js","webpack://platformio-ide/./src/project/tasks.js","webpack://platformio-ide/./src/state-storage.js","webpack://platformio-ide/./src/terminal.js","webpack://platformio-ide/./src/utils.js","webpack://platformio-ide/./src/views/quick-access-tree.js","webpack://platformio-ide/external \"fs\"","webpack://platformio-ide/external \"fs-plus\"","webpack://platformio-ide/external \"os\"","webpack://platformio-ide/external \"path\"","webpack://platformio-ide/external \"platformio-node-helpers\"","webpack://platformio-ide/external \"platformio-vscode-debug\"","webpack://platformio-ide/external \"vscode\"","webpack://platformio-ide/webpack/bootstrap","webpack://platformio-ide/webpack/startup"],"sourcesContent":["/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nexport const IS_WINDOWS = process.platform.startsWith('win');\nexport const IS_OSX = process.platform == 'darwin';\nexport const IS_LINUX = !IS_WINDOWS && !IS_OSX;\nexport const PIO_CORE_VERSION_SPEC = '>=5.1';\nexport const STATUS_BAR_PRIORITY_START = 10;\nexport const CONFLICTED_EXTENSION_IDS = [\n  'llvm-vs-code-extensions.vscode-clangd',\n  'vsciot-vscode.vscode-arduino',\n  'vscode-openapi',\n];\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport { IS_OSX } from './constants';\nimport { extension } from './main';\nimport { notifyError } from './utils';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class PIOHome {\n  static defaultStartUrl = '/';\n\n  constructor() {\n    this.subscriptions = [];\n    this._currentPanel = undefined;\n    this._lastStartUrl = PIOHome.defaultStartUrl;\n\n    // close PIO Home when workspaces folders are changed (VSCode reactivates extensiuon)\n    this.subscriptions.push(\n      vscode.workspace.onDidChangeWorkspaceFolders(this.disposePanel.bind(this))\n    );\n  }\n\n  async toggle(startUrl = PIOHome.defaultStartUrl) {\n    const column = vscode.window.activeTextEditor\n      ? vscode.window.activeTextEditor.viewColumn\n      : undefined;\n    try {\n      if (this._currentPanel) {\n        if (this._lastStartUrl !== startUrl) {\n          this._currentPanel.webview.html = await this.getWebviewContent(startUrl);\n        }\n        return this._currentPanel.reveal(column);\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    this._currentPanel = await this.newPanel(startUrl);\n  }\n\n  async newPanel(startUrl) {\n    const panel = vscode.window.createWebviewPanel(\n      'pioHome',\n      extension.getEnterpriseSetting('pioHomeTitle', 'PIO Home'),\n      vscode.ViewColumn.One,\n      {\n        enableScripts: true,\n        retainContextWhenHidden: true,\n      }\n    );\n    this.subscriptions.push(panel.onDidDispose(this.onPanelDisposed.bind(this)));\n    panel.iconPath = vscode.Uri.file(\n      path.join(\n        extension.context.extensionPath,\n        'resources',\n        'platformio-mini-logo.svg'\n      )\n    );\n    panel.webview.html = this.getLoadingContent();\n    try {\n      panel.webview.html = await this.getWebviewContent(startUrl);\n    } catch (err) {\n      if (!err.toString().includes('Webview is disposed')) {\n        notifyError('Start PIO Home Server', err);\n      }\n    }\n    return panel;\n  }\n\n  getTheme() {\n    const workbench = vscode.workspace.getConfiguration('workbench') || {};\n    return (workbench.colorTheme || '').toLowerCase().includes('light')\n      ? 'light'\n      : 'dark';\n  }\n\n  getLoadingContent() {\n    const theme = this.getTheme();\n    return `<!DOCTYPE html>\n    <html lang=\"en\">\n    <body style=\"background-color: ${theme === 'light' ? '#FFF' : '#1E1E1E'}\">\n      <div style=\"padding: 15px;\">Loading...</div>\n    </body>\n    </html>`;\n  }\n\n  async getWebviewContent(startUrl) {\n    this._lastStartUrl = startUrl;\n    await pioNodeHelpers.home.ensureServerStarted({\n      port: extension.getSetting('pioHomeServerHttpPort'),\n      host: extension.getSetting('pioHomeServerHttpHost'),\n      onIDECommand: async (command, params) => {\n        if (command === 'open_project') {\n          if (extension.projectObservable) {\n            extension.projectObservable.saveProjectStateItem(\n              vscode.Uri.file(params).fsPath,\n              'activeEnv',\n              undefined\n            );\n          }\n          this.disposePanel();\n          if (vscode.workspace.workspaceFolders) {\n            vscode.workspace.updateWorkspaceFolders(\n              vscode.workspace.workspaceFolders.length,\n              null,\n              { uri: vscode.Uri.file(params) }\n            );\n          } else {\n            vscode.commands.executeCommand(\n              'vscode.openFolder',\n              vscode.Uri.file(params)\n            );\n          }\n          vscode.commands.executeCommand('workbench.view.explorer');\n        } else if (command === 'open_text_document') {\n          const editor = await vscode.window.showTextDocument(\n            vscode.Uri.file(params.path)\n          );\n          const gotoPosition = new vscode.Position(\n            (params.line || 1) - 1,\n            (params.column || 1) - 1\n          );\n          editor.selection = new vscode.Selection(gotoPosition, gotoPosition);\n          editor.revealRange(\n            new vscode.Range(gotoPosition, gotoPosition),\n            vscode.TextEditorRevealType.InCenter\n          );\n        }\n      },\n    });\n    const theme = this.getTheme();\n    return `<!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <script>\n          window.addEventListener('message', (e) => {\n            switch (e.data.command) {\n              case 'kbd-event': {\n                if (${IS_OSX}) {\n                  window.dispatchEvent(new KeyboardEvent('keydown', e.data.data));\n                }\n                break;\n              }\n            }\n          }, false);\n        </script>\n      </head>\n      <body style=\"margin: 0; padding: 0; height: 100%; overflow: hidden; background-color: ${\n        theme === 'light' ? '#FFF' : '#1E1E1E'\n      }\">\n        <iframe src=\"${pioNodeHelpers.home.getFrontendUrl({\n          start: startUrl,\n          theme,\n          workspace: extension.getEnterpriseSetting('defaultPIOHomeWorkspace'),\n        })}\"\n          width=\"100%\"\n          height=\"100%\"\n          frameborder=\"0\"\n          style=\"border: 0; left: 0; right: 0; bottom: 0; top: 0; position:absolute;\" />\n      </body>\n      </html>\n    `;\n  }\n\n  onPanelDisposed() {\n    this._currentPanel = undefined;\n  }\n\n  disposePanel() {\n    if (!this._currentPanel) {\n      return;\n    }\n    this._currentPanel.dispose();\n    this._currentPanel = undefined;\n  }\n\n  dispose() {\n    this.disposePanel();\n    pioNodeHelpers.misc.disposeSubscriptions(this.subscriptions);\n    pioNodeHelpers.home.shutdownServer();\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport { PIO_CORE_VERSION_SPEC } from '../constants';\nimport PythonPrompt from './python-prompt';\nimport StateStorage from '../state-storage';\nimport vscode from 'vscode';\n\nexport default class InstallationManager {\n  LOCK_TIMEOUT = 1 * 60 * 1000; // 1 minute\n  LOCK_KEY = 'platformio-ide:installer-lock';\n  STORAGE_STATE_KEY = 'platformio-ide:installer-state';\n\n  constructor(globalState, disableAutoUpdates = false) {\n    this.globalState = globalState;\n    this.stateStorage = new StateStorage(globalState, this.STORAGE_STATE_KEY);\n\n    const config = vscode.workspace.getConfiguration('platformio-ide');\n    this.stages = [\n      new pioNodeHelpers.installer.PlatformIOCoreStage(\n        this.stateStorage,\n        this.onDidStatusChange.bind(this),\n        {\n          pioCoreVersionSpec: PIO_CORE_VERSION_SPEC,\n          useBuiltinPython: config.get('useBuiltinPython'),\n          useBuiltinPIOCore: config.get('useBuiltinPIOCore'),\n          useDevelopmentPIOCore: config.get('useDevelopmentPIOCore'),\n          pythonPrompt: new PythonPrompt(),\n          disableAutoUpdates: disableAutoUpdates,\n        }\n      ),\n    ];\n  }\n\n  onDidStatusChange() {\n    // increase lock timeout on each stage update\n    if (this.locked()) {\n      this.lock();\n    }\n  }\n\n  lock() {\n    return this.globalState.update(this.LOCK_KEY, new Date().getTime());\n  }\n\n  unlock() {\n    return this.globalState.update(this.LOCK_KEY, undefined);\n  }\n\n  locked() {\n    const lockTime = this.globalState.get(this.LOCK_KEY);\n    if (!lockTime) {\n      return false;\n    }\n    return new Date().getTime() - parseInt(lockTime) <= this.LOCK_TIMEOUT;\n  }\n\n  async check() {\n    let result = true;\n    for (const stage of this.stages) {\n      try {\n        if (!(await stage.check())) {\n          result = false;\n        }\n      } catch (err) {\n        result = false;\n        console.warn(err);\n      }\n    }\n    return result;\n  }\n\n  async install(progress) {\n    const stageIncrementTotal = 100 / this.stages.length;\n    for (const stage of this.stages) {\n      await stage.install((message, increment) => {\n        progress.report({\n          message,\n          increment: stageIncrementTotal * (increment / 100),\n        });\n      });\n    }\n    progress.report({ message: 'Finished! Please restart VSCode.', increment: 100 });\n  }\n\n  destroy() {\n    return this.stages.map((stage) => stage.destroy());\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport fs from 'fs-plus';\nimport vscode from 'vscode';\n\nexport default class PythonPrompt {\n  STATUS_TRY_AGAIN = 0;\n  STATUS_ABORT = 1;\n  STATUS_CUSTOMEXE = 2;\n\n  async prompt() {\n    const selectedItem = await vscode.window.showInformationMessage(\n      'PlatformIO: Can not find working Python 3.6+ Interpreter. Please install the latest Python 3 and restart VSCode',\n      { title: 'Install Python', isCloseAffordance: false },\n      { title: 'I have Python', isCloseAffordance: false },\n      { title: 'Try again', isCloseAffordance: false },\n      { title: 'Abort PlatformIO IDE Installation', isCloseAffordance: true }\n    );\n\n    let result = { status: this.STATUS_TRY_AGAIN };\n    let pythonExecutable = undefined;\n    switch (selectedItem ? selectedItem.title : undefined) {\n      case 'Install Python':\n        vscode.commands.executeCommand(\n          'vscode.open',\n          vscode.Uri.parse(\n            'http://docs.platformio.org/page/faq.html#install-python-interpreter'\n          )\n        );\n        break;\n      case 'I have Python':\n        pythonExecutable = await vscode.window.showInputBox({\n          prompt: 'Please specify a full path to Python executable file',\n          placeHolder: 'Full path to python/python.exe',\n          validateInput: (value) =>\n            !fs.isFileSync(value) ? 'Invalid path to Python Interpreter' : null,\n        });\n        if (pythonExecutable) {\n          result = {\n            status: this.STATUS_CUSTOMEXE,\n            pythonExecutable,\n          };\n        }\n        break;\n      case 'Abort PlatformIO IDE Installation':\n        result = { status: this.STATUS_ABORT };\n        break;\n    }\n\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as misc from './misc';\nimport * as pioNodeHelpers from 'platformio-node-helpers';\nimport * as piodebug from 'platformio-vscode-debug';\nimport * as utils from './utils';\n\nimport InstallationManager from './installer/manager';\nimport PIOHome from './home';\nimport PIOTerminal from './terminal';\nimport ProjectObservable from './project/observable';\nimport QuickAccessTreeProvider from './views/quick-access-tree';\nimport { STATUS_BAR_PRIORITY_START } from './constants';\nimport StateStorage from './state-storage';\nimport fs from 'fs-plus';\nimport vscode from 'vscode';\n\nclass PlatformIOVSCodeExtension {\n  constructor() {\n    this.context = undefined;\n    this.pioTerm = undefined;\n    this.pioHome = undefined;\n    this.projectObservable = undefined;\n    this.subscriptions = [];\n\n    this._enterpriseSettings = undefined;\n  }\n\n  async activate(context) {\n    this.context = context;\n    this.stateStorage = new StateStorage(context.globalState);\n    this.pioHome = new PIOHome();\n    this.pioTerm = new PIOTerminal();\n\n    this.subscriptions.push(this.pioHome, this.pioTerm);\n\n    const hasPIOProject = ProjectObservable.getPIOProjectDirs().length > 0;\n    if (!hasPIOProject && this.getSetting('activateOnlyOnPlatformIOProject')) {\n      return;\n    }\n\n    // temporary workaround for https://github.com/Microsoft/vscode/issues/58348\n    if (\n      !vscode.workspace\n        .getConfiguration('extensions')\n        .has('showRecommendationsOnlyOnDemand')\n    ) {\n      vscode.workspace\n        .getConfiguration('extensions')\n        .update('showRecommendationsOnlyOnDemand', true);\n    }\n\n    this.patchOSEnviron();\n    await this.startInstaller(!hasPIOProject);\n    this.subscriptions.push(this.handleUseDevelopmentPIOCoreConfiguration());\n\n    vscode.commands.executeCommand('setContext', 'pioCoreReady', true);\n    if (typeof this.getEnterpriseSetting('onPIOCoreReady') === 'function') {\n      await this.getEnterpriseSetting('onPIOCoreReady')();\n    }\n\n    this.subscriptions.push(\n      vscode.window.registerTreeDataProvider(\n        'platformio-activitybar.quickAccess',\n        new QuickAccessTreeProvider()\n      )\n    );\n\n    this.registerGlobalCommands();\n\n    if (!hasPIOProject) {\n      this.initToolbar({ filterCommands: ['platformio-ide.showHome'] });\n      return;\n    }\n\n    vscode.commands.executeCommand('setContext', 'pioProjectReady', true);\n\n    this.initDebug();\n    this.initToolbar({\n      ignoreCommands: this.getEnterpriseSetting('ignoreToolbarCommands'),\n    });\n    this.projectObservable = new ProjectObservable();\n    this.subscriptions.push(this.projectObservable);\n\n    this.startPIOHome();\n\n    misc.maybeRateExtension(this.stateStorage);\n    misc.warnAboutConflictedExtensions();\n    this.subscriptions.push(\n      vscode.window.onDidChangeActiveTextEditor((editor) =>\n        misc.warnAboutInoFile(editor, this.stateStorage)\n      )\n    );\n  }\n\n  getSetting(id) {\n    return vscode.workspace.getConfiguration('platformio-ide').get(id);\n  }\n\n  loadEnterpriseSettings() {\n    const ext = vscode.extensions.all.find(\n      (item) =>\n        item.id.startsWith('platformio.') &&\n        item.id !== 'platformio.platformio-ide' &&\n        item.isActive\n    );\n    return ext && ext.exports ? ext.exports.settings : undefined;\n  }\n\n  getEnterpriseSetting(id, defaultValue = undefined) {\n    if (!this._enterpriseSettings) {\n      this._enterpriseSettings = this.loadEnterpriseSettings();\n    }\n    if (this._enterpriseSettings && id in this._enterpriseSettings) {\n      return this._enterpriseSettings[id];\n    }\n    return defaultValue;\n  }\n\n  patchOSEnviron() {\n    const extraVars = {\n      PLATFORMIO_IDE: utils.getIDEVersion(),\n    };\n    // handle HTTP proxy settings\n    const http_proxy = vscode.workspace.getConfiguration('http').get('proxy');\n    if (http_proxy && !process.env.HTTP_PROXY && !process.env.http_proxy) {\n      extraVars['HTTP_PROXY'] = http_proxy;\n    }\n    if (!vscode.workspace.getConfiguration('http').get('proxyStrictSSL')) {\n      // https://stackoverflow.com/questions/48391750/disable-python-requests-ssl-validation-for-an-imported-module\n      extraVars['CURL_CA_BUNDLE'] = '';\n    }\n    if (http_proxy && !process.env.HTTPS_PROXY && !process.env.https_proxy) {\n      extraVars['HTTPS_PROXY'] = http_proxy;\n    }\n    if (this.getSetting('customPyPiIndexUrl')) {\n      extraVars['PIP_INDEX_URL'] = this.getSetting('customPyPiIndexUrl');\n    }\n    pioNodeHelpers.proc.patchOSEnviron({\n      caller: 'vscode',\n      extraPath: this.getSetting('customPATH'),\n      extraVars,\n    });\n  }\n\n  async startInstaller(disableAutoUpdates) {\n    const im = new InstallationManager(this.context.globalState, disableAutoUpdates);\n    if (im.locked()) {\n      vscode.window.showInformationMessage(\n        'PlatformIO IDE installation has been suspended, because PlatformIO ' +\n          'IDE Installer is already started in another window.'\n      );\n      return;\n    }\n    const doInstall = await vscode.window.withProgress(\n      {\n        location: vscode.ProgressLocation.Window,\n        title: 'PlatformIO',\n      },\n      async (progress) => {\n        progress.report({\n          message: 'Checking PlatformIO Core installation...',\n        });\n        try {\n          return !(await im.check());\n        } catch (err) {}\n        return true;\n      }\n    );\n\n    if (!doInstall) {\n      return;\n    }\n\n    return await vscode.window.withProgress(\n      {\n        location: vscode.ProgressLocation.Notification,\n        title: 'PlatformIO Installer',\n      },\n      async (progress) => {\n        progress.report({\n          message: 'Installing PlatformIO IDE...',\n        });\n        const outputChannel = vscode.window.createOutputChannel(\n          'PlatformIO Installation'\n        );\n        outputChannel.show();\n        outputChannel.appendLine('Installing PlatformIO IDE...');\n        outputChannel.appendLine(\n          'It may take a few minutes depending on your connection speed'\n        );\n        outputChannel.appendLine(\n          'Please do not close this window and do not ' +\n            'open other folders until this process is completed.'\n        );\n        outputChannel.appendLine(\n          '\\nDebugging information is available via VSCode > Help > Toggle Developer Tools > Console.'\n        );\n\n        try {\n          im.lock();\n          await im.install(progress);\n          outputChannel.appendLine('PlatformIO IDE installed successfully.\\n');\n          outputChannel.appendLine('Please restart VSCode.');\n          const action = 'Reload Now';\n          const selected = await vscode.window.showInformationMessage(\n            'PlatformIO IDE has been successfully installed! Please reload window',\n            action\n          );\n          if (selected === action) {\n            vscode.commands.executeCommand('workbench.action.reloadWindow');\n          }\n        } catch (err) {\n          outputChannel.appendLine('Failed to install PlatformIO IDE.');\n          utils.notifyError('Installation Manager', err);\n        } finally {\n          im.unlock();\n        }\n\n        im.destroy();\n        return true;\n      }\n    );\n  }\n\n  async startPIOHome() {\n    if (\n      this.getSetting('disablePIOHomeStartup') ||\n      !pioNodeHelpers.home.showAtStartup('vscode')\n    ) {\n      return;\n    }\n    vscode.commands.executeCommand('platformio-ide.showHome');\n  }\n\n  registerGlobalCommands() {\n    this.subscriptions.push(\n      vscode.commands.registerCommand('platformio-ide.showHome', (startUrl) =>\n        this.pioHome.toggle(startUrl)\n      ),\n      vscode.commands.registerCommand('platformio-ide.newTerminal', () =>\n        this.pioTerm.new().show()\n      ),\n      vscode.commands.registerCommand('platformio-ide.openPIOCoreCLI', () =>\n        this.pioTerm.sendText('pio --help')\n      ),\n      vscode.commands.registerCommand('platformio-ide.startDebugging', () => {\n        vscode.commands.executeCommand('workbench.view.debug');\n        vscode.commands.executeCommand('workbench.debug.action.toggleRepl');\n        vscode.commands.executeCommand('workbench.action.debug.start');\n      }),\n      vscode.commands.registerCommand('platformio-ide.updateGlobalLibs', () =>\n        this.pioTerm.sendText('pio lib --global update')\n      ),\n      vscode.commands.registerCommand('platformio-ide.updatePlatforms', () =>\n        this.pioTerm.sendText('pio platform update')\n      ),\n      vscode.commands.registerCommand('platformio-ide.updateCore', () =>\n        this.pioTerm.sendText('pio update')\n      ),\n      vscode.commands.registerCommand('platformio-ide.upgradeCore', () =>\n        this.pioTerm.sendText('pio upgrade')\n      )\n    );\n  }\n\n  initDebug() {\n    piodebug.activate(this.context);\n  }\n\n  initToolbar({ filterCommands, ignoreCommands }) {\n    if (this.getSetting('disableToolbar')) {\n      return;\n    }\n    [\n      ['$(home)', 'PlatformIO: Home', 'platformio-ide.showHome'],\n      ['$(check)', 'PlatformIO: Build', 'platformio-ide.build'],\n      ['$(arrow-right)', 'PlatformIO: Upload', 'platformio-ide.upload'],\n      ['$(trashcan)', 'PlatformIO: Clean', 'platformio-ide.clean'],\n      ['$(plug)', 'PlatformIO: Serial Monitor', 'platformio-ide.serialMonitor'],\n      ['$(terminal)', 'PlatformIO: New Terminal', 'platformio-ide.newTerminal'],\n    ]\n      .filter(\n        (item) =>\n          (!filterCommands || filterCommands.includes(item[2])) &&\n          (!ignoreCommands || !ignoreCommands.includes(item[2]))\n      )\n      .reverse()\n      .forEach((item, index) => {\n        const [text, tooltip, command] = item;\n        const sbItem = vscode.window.createStatusBarItem(\n          vscode.StatusBarAlignment.Left,\n          STATUS_BAR_PRIORITY_START + index + 1\n        );\n        sbItem.text = text;\n        sbItem.tooltip = tooltip;\n        sbItem.command = command;\n        sbItem.show();\n        this.subscriptions.push(sbItem);\n      });\n  }\n\n  handleUseDevelopmentPIOCoreConfiguration() {\n    return vscode.workspace.onDidChangeConfiguration((e) => {\n      if (\n        !e.affectsConfiguration('platformio-ide.useDevelopmentPIOCore') ||\n        !this.getSetting('useBuiltinPIOCore')\n      ) {\n        return;\n      }\n      const envDir = pioNodeHelpers.core.getEnvDir();\n      if (!envDir || !fs.isDirectorySync(envDir)) {\n        return;\n      }\n      pioNodeHelpers.home.shutdownServer();\n      const delayedJob = () => {\n        try {\n          fs.removeSync(envDir);\n        } catch (err) {\n          console.warn(err);\n        }\n        vscode.window.showInformationMessage(\n          'Please restart VSCode to apply the changes.'\n        );\n      };\n      setTimeout(delayedJob, 2000);\n    });\n  }\n\n  disposeLocalSubscriptions() {\n    vscode.commands.executeCommand('setContext', 'pioCoreReady', false);\n    pioNodeHelpers.misc.disposeSubscriptions(this.subscriptions);\n  }\n\n  deactivate() {\n    this.disposeLocalSubscriptions();\n  }\n}\n\nexport const extension = new PlatformIOVSCodeExtension();\n\nexport function activate(context) {\n  extension.activate(context);\n  return extension;\n}\n\nexport function deactivate() {\n  extension.deactivate();\n  piodebug.deactivate();\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { CONFLICTED_EXTENSION_IDS } from './constants';\nimport vscode from 'vscode';\n\nexport async function maybeRateExtension(stateStorage) {\n  const stateKey = 'rate-extension';\n  const askAfterSessionNums = 13;\n  let state = stateStorage.getValue(stateKey);\n  if (state && state.done) {\n    return;\n  } else if (!state || !state.callCounter) {\n    state = {\n      callCounter: 0,\n      done: false,\n    };\n  }\n\n  state.callCounter += 1;\n  if (state.callCounter < askAfterSessionNums) {\n    stateStorage.setValue(stateKey, state);\n    return;\n  }\n\n  const selectedItem = await vscode.window.showInformationMessage(\n    'If you enjoy using PlatformIO IDE for VSCode, would you mind taking a moment to rate it? ' +\n      'It will not take more than one minute. Thanks for your support!',\n    { title: 'Rate PlatformIO IDE Extension', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: false },\n    { title: 'No, Thanks', isCloseAffordance: true }\n  );\n\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'Rate PlatformIO IDE Extension':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('http://bit.ly/pio-vscode-rate')\n      );\n      state.done = true;\n      break;\n    case 'No, Thanks':\n      state.done = true;\n      break;\n    default:\n      state.callCounter = 0;\n  }\n  stateStorage.setValue(stateKey, state);\n}\n\nexport async function warnAboutConflictedExtensions() {\n  const conflicted = vscode.extensions.all.filter(\n    (ext) => ext.isActive && CONFLICTED_EXTENSION_IDS.includes(ext.id)\n  );\n  if (conflicted.length === 0) {\n    return;\n  }\n  const selectedItem = await vscode.window.showWarningMessage(\n    `Conflicted extensions with IntelliSense service were detected (${conflicted\n      .map((ext) => ext.packageJSON.displayName || ext.id)\n      .join(', ')}). ` +\n      'Code-completion, linting and navigation will not work properly. ' +\n      'Please disable or uninstall them (Menu > View > Extensions).',\n    { title: 'More details', isCloseAffordance: false },\n    { title: 'Uninstall conflicted', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: true }\n  );\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'More details':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('http://bit.ly/pio-vscode-conflicted-extensions')\n      );\n      break;\n    case 'Uninstall conflicted':\n      conflicted.forEach((ext) => {\n        vscode.commands.executeCommand(\n          'workbench.extensions.uninstallExtension',\n          ext.id\n        );\n      });\n      vscode.commands.executeCommand('workbench.action.reloadWindow');\n      break;\n  }\n}\n\nexport async function warnAboutInoFile(editor, stateStorage) {\n  if (!editor || !editor.document || !editor.document.fileName) {\n    return;\n  }\n  if (!editor.document.fileName.endsWith('.ino')) {\n    return;\n  }\n  const stateKey = 'ino-warn-disabled';\n  if (stateStorage.getValue(stateKey)) {\n    return;\n  }\n\n  const selectedItem = await vscode.window.showWarningMessage(\n    'C/C++ IntelliSense service does not support .INO files. ' +\n      'It might lead to the spurious problems with code completion, linting, and debugging. ' +\n      'Please convert .INO sketch into the valid .CPP file.',\n    { title: 'Show instruction', isCloseAffordance: false },\n    { title: 'Do not show again', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: true }\n  );\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'Show instruction':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('http://bit.ly/ino2cpp')\n      );\n      break;\n    case 'Do not show again':\n      stateStorage.setValue(stateKey, 1);\n      break;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport ProjectTaskManager from './tasks';\nimport { STATUS_BAR_PRIORITY_START } from '../constants';\nimport StateStorage from '../state-storage';\nimport { extension } from '../main';\nimport fs from 'fs';\nimport { notifyError } from '../utils';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class ProjectObservable {\n  constructor() {\n    this._persistentState = new StateStorage(extension.context.globalState, 'projects');\n    this._taskManager = undefined;\n    this._sbEnvSwitcher = undefined;\n    this._pool = new pioNodeHelpers.project.ProjectPool({\n      ide: 'vscode',\n      api: {\n        createFileSystemWatcher: vscode.workspace.createFileSystemWatcher,\n        createDirSystemWatcher: (dir) =>\n          vscode.workspace.createFileSystemWatcher(path.join(dir, '*')),\n        withIndexRebuildingProgress: (task) =>\n          vscode.window.withProgress(\n            {\n              location: { viewId: vscode.ProgressLocation.Window },\n              title: 'PlatformIO: Rebuilding IntelliSense Index',\n            },\n            task\n          ),\n        withTasksLoadingProgress: (task) =>\n          vscode.window.withProgress(\n            {\n              location: { viewId: ProjectTaskManager.TASKS_VIEW_ID },\n            },\n            async () =>\n              await vscode.window.withProgress(\n                {\n                  location: { viewId: vscode.ProgressLocation.Window },\n                  title: 'PlatformIO: Loading tasks...',\n                },\n                task\n              )\n          ),\n        onDidChangeProjectConfig: (projectDir) => {\n          if (this._taskManager && this._taskManager.projectDir === projectDir) {\n            this._taskManager.requestRefresh();\n          }\n          this.saveActiveProjectState();\n        },\n        onDidNotifyError: notifyError.bind(this),\n      },\n      settings: {\n        autoPreloadEnvTasks: extension.getSetting('autoPreloadEnvTasks'),\n        autoRebuild: extension.getSetting('autoRebuildAutocompleteIndex'),\n      },\n    });\n\n    this.subscriptions = [\n      this._pool,\n      vscode.window.onDidChangeActiveTextEditor(() => {\n        if (!extension.getSetting('activateProjectOnTextEditorChange')) {\n          return;\n        }\n        const projectDir = this.getActiveEditorProjectDir();\n        if (projectDir) {\n          this.switchToProject(projectDir);\n        }\n      }),\n      vscode.workspace.onDidChangeWorkspaceFolders(() =>\n        this.switchToProject(this.findActiveProjectDir())\n      ),\n      vscode.commands.registerCommand('platformio-ide.rebuildProjectIndex', () =>\n        this._pool.getActiveObserver().rebuildIndex({ force: true })\n      ),\n      vscode.commands.registerCommand('platformio-ide.refreshProjectTasks', () =>\n        this._taskManager.refresh({ force: true })\n      ),\n      vscode.commands.registerCommand('platformio-ide.privateRunTask', (task) =>\n        this._taskManager.runTask(task)\n      ),\n    ];\n\n    this.registerEnvSwitcher();\n    // switch to the first project in a workspace on start-up\n    this.switchToProject(this.findActiveProjectDir());\n  }\n\n  dispose() {\n    pioNodeHelpers.misc.disposeSubscriptions(this.subscriptions);\n  }\n\n  static isPIOProjectSync(projectDir) {\n    try {\n      fs.accessSync(path.join(projectDir, 'platformio.ini'));\n      return true;\n    } catch (err) {}\n    return false;\n  }\n\n  static getPIOProjectDirs() {\n    return (vscode.workspace.workspaceFolders || [])\n      .map((folder) => folder.uri.fsPath)\n      .filter((projectDir) => ProjectObservable.isPIOProjectSync(projectDir));\n  }\n\n  findActiveProjectDir() {\n    let projectDir = undefined;\n    if (extension.getSetting('activateProjectOnTextEditorChange')) {\n      projectDir = this.getActiveEditorProjectDir();\n    }\n    return projectDir || this.getSelectedProjectDir();\n  }\n\n  getSelectedProjectDir() {\n    const pioProjectDirs = ProjectObservable.getPIOProjectDirs();\n    const currentActiveDir = this._pool.getActiveProjectDir();\n    if (pioProjectDirs.length < 1) {\n      return undefined;\n    }\n    if (\n      currentActiveDir &&\n      pioProjectDirs.find((projectDir) => projectDir === currentActiveDir)\n    ) {\n      return currentActiveDir;\n    }\n    const lastActiveDir = this._persistentState.getValue('lastProjectDir');\n    if (\n      lastActiveDir &&\n      pioProjectDirs.find((projectDir) => projectDir === lastActiveDir)\n    ) {\n      return lastActiveDir;\n    }\n    return pioProjectDirs[0];\n  }\n\n  getActiveEditorProjectDir() {\n    const pioProjectDirs = ProjectObservable.getPIOProjectDirs();\n    if (pioProjectDirs.length < 1) {\n      return undefined;\n    }\n    const editor = vscode.window.activeTextEditor;\n    if (!editor) {\n      return undefined;\n    }\n    const resource = editor.document.uri;\n    if (resource.scheme !== 'file') {\n      return undefined;\n    }\n    const folder = vscode.workspace.getWorkspaceFolder(resource);\n    if (!folder || !ProjectObservable.isPIOProjectSync(folder.uri.fsPath)) {\n      // outside workspace\n      return undefined;\n    }\n    return folder.uri.fsPath;\n  }\n\n  loadProjectStateItem(projectDir, name) {\n    const data = (this._persistentState.getValue('projects') || {})[projectDir] || {};\n    return data[name];\n  }\n\n  saveProjectStateItem(projectDir, name, value) {\n    const projects = this._persistentState.getValue('projects') || {};\n    if (!projects[projectDir]) {\n      projects[projectDir] = {};\n    }\n    projects[projectDir][name] = value;\n\n    // cleanup removed project\n    for (const key of Object.keys(projects)) {\n      if (ProjectObservable.isPIOProjectSync(key)) {\n        continue;\n      }\n      delete projects[key];\n    }\n\n    this._persistentState.setValue('projects', projects);\n    this._persistentState.setValue('lastProjectDir', projectDir);\n  }\n\n  saveActiveProjectState() {\n    const observer = this._pool.getActiveObserver();\n    if (!observer) {\n      return;\n    }\n    this.saveProjectStateItem(\n      observer.projectDir,\n      'activeEnv',\n      observer.getActiveEnvName()\n    );\n  }\n\n  async switchToProject(projectDir, options = {}) {\n    if (!projectDir) {\n      console.error('switchProject => Please provide project folder');\n      return;\n    }\n    this._sbEnvSwitcher.text = '$(root-folder) Loading...';\n\n    let currentProjectDir = undefined;\n    let currentEnvName = undefined;\n    if (this._pool.getActiveObserver()) {\n      currentProjectDir = this._pool.getActiveObserver().projectDir;\n      currentEnvName = this._pool.getActiveObserver().getActiveEnvName();\n    }\n\n    const observer = this._pool.getObserver(projectDir);\n    if ('envName' in options) {\n      await observer.switchProjectEnv(options.envName);\n    } else if (!observer.getActiveEnvName()) {\n      await observer.switchProjectEnv(\n        this.loadProjectStateItem(projectDir, 'activeEnv')\n      );\n    }\n\n    // ignore active project and & env\n    if (\n      !currentProjectDir ||\n      currentProjectDir !== projectDir ||\n      currentEnvName !== observer.getActiveEnvName()\n    ) {\n      this._pool.switch(projectDir);\n\n      if (this._taskManager) {\n        this._taskManager.dispose();\n        this._taskManager = undefined;\n      }\n      this._taskManager = new ProjectTaskManager(projectDir, observer);\n\n      // open \"platformio.ini\" if no visible editors\n      if (\n        vscode.window.visibleTextEditors.length === 0 &&\n        extension.getSetting('autoOpenPlatformIOIniFile')\n      ) {\n        vscode.window.showTextDocument(\n          vscode.Uri.file(path.join(projectDir, 'platformio.ini'))\n        );\n      }\n    }\n\n    this.updateEnvSwitcher();\n    this.saveActiveProjectState();\n  }\n\n  registerEnvSwitcher() {\n    this._sbEnvSwitcher = vscode.window.createStatusBarItem(\n      vscode.StatusBarAlignment.Left,\n      STATUS_BAR_PRIORITY_START\n    );\n    this._sbEnvSwitcher.tooltip = 'Switch PlatformIO Project Environment';\n    this._sbEnvSwitcher.command = 'platformio-ide.switchProjectEnv';\n    this._sbEnvSwitcher.text = '$(root-folder) Loading...';\n    this._sbEnvSwitcher.show();\n\n    this.subscriptions.push(\n      this._sbEnvSwitcher,\n      vscode.commands.registerCommand('platformio-ide.switchProjectEnv', () =>\n        this.pickProjectEnv()\n      )\n    );\n  }\n\n  updateEnvSwitcher() {\n    const observer = this._pool.getActiveObserver();\n    if (!observer) {\n      return;\n    }\n    const envName = observer.getActiveEnvName()\n      ? `env:${observer.getActiveEnvName()}`\n      : 'Default';\n    this._sbEnvSwitcher.text = `$(root-folder) ${envName} (${path.basename(\n      observer.projectDir\n    )})`;\n  }\n\n  async pickProjectEnv() {\n    const items = [];\n    for (const projectDir of ProjectObservable.getPIOProjectDirs()) {\n      const observer = this._pool.getObserver(projectDir);\n      const envs = await observer.getProjectEnvs();\n      if (!envs || !envs.length) {\n        continue;\n      }\n      const shortProjectDir = `${path.basename(\n        path.dirname(projectDir)\n      )}/${path.basename(projectDir)}`;\n      items.push({\n        projectDir,\n        label: 'Default',\n        description: `$(folder) ${shortProjectDir} (\"default_envs\" from \"platformio.ini\")`,\n      });\n      items.push(\n        ...envs.map((item) => ({\n          projectDir,\n          envName: item.name,\n          label: `env:${item.name}`,\n          description: `$(folder) ${shortProjectDir}`,\n        }))\n      );\n    }\n    const pickedItem = await vscode.window.showQuickPick(items, {\n      matchOnDescription: true,\n    });\n    if (!pickedItem) {\n      return;\n    }\n    this.switchToProject(pickedItem.projectDir, { envName: pickedItem.envName });\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as vscode from 'vscode';\n\nexport default class ProjectTasksTreeProvider {\n  static DEFAULT_ENV_NAME = 'Default';\n\n  constructor(id, envs, tasks, activeEnvName) {\n    this.id = id;\n    this.envs = envs;\n    this.tasks = tasks;\n    this.activeEnvName = activeEnvName;\n    this.multiEnvProject = this.envs.length > 1;\n  }\n\n  getTreeItem(item) {\n    return item instanceof vscode.TreeItem ? item : this.taskToTreeItem(item);\n  }\n\n  taskToTreeItem(task) {\n    const treeItem = new vscode.TreeItem(task.name);\n    treeItem.iconPath = new vscode.ThemeIcon('circle-outline');\n    treeItem.tooltip = task.title;\n    treeItem.command = {\n      title: task.title,\n      command: 'platformio-ide.privateRunTask',\n      arguments: [task],\n    };\n    if (!task.coreEnv && task.multienv && this.multiEnvProject) {\n      treeItem.label += ' All';\n    }\n    return treeItem;\n  }\n\n  getChildren(element) {\n    if (element && element.group) {\n      return this.getEnvGroupChildren(element.env, element.group);\n    } else if (element) {\n      return this.getEnvChildren(element.env);\n    }\n    return this.getRootChildren();\n  }\n\n  getRootChildren() {\n    const result = [];\n    for (const envName of [undefined, ...this.envs.map((item) => item.name)]) {\n      const treeItem = new vscode.TreeItem(\n        envName || ProjectTasksTreeProvider.DEFAULT_ENV_NAME,\n        envName && (envName === this.activeEnvName || !this.multiEnvProject)\n          ? vscode.TreeItemCollapsibleState.Expanded\n          : vscode.TreeItemCollapsibleState.Collapsed\n      );\n      treeItem.id = `${this.id}-${envName}`;\n      treeItem.env = envName;\n      treeItem.iconPath = new vscode.ThemeIcon('root-folder');\n      result.push(treeItem);\n    }\n    return result;\n  }\n\n  getEnvGroupChildren(env, group) {\n    return this.tasks.filter((task) => task.coreEnv === env && task.group === group);\n  }\n\n  getEnvChildren(env) {\n    const envTasks = this.tasks.filter((task) => task.coreEnv === env);\n    if (!envTasks.length) {\n      return [new vscode.TreeItem('Loading...')];\n    }\n    const result = envTasks.filter((task) => !task.group);\n    // root groups\n    for (const group of this.getTaskGroups(envTasks)) {\n      const element = new vscode.TreeItem(\n        group,\n        ['General', 'Platform'].includes(group)\n          ? vscode.TreeItemCollapsibleState.Expanded\n          : vscode.TreeItemCollapsibleState.Collapsed\n      );\n      element.env = env;\n      element.group = group;\n      element.iconPath = vscode.ThemeIcon.Folder;\n      result.push(element);\n    }\n    return result;\n  }\n\n  getTaskGroups(tasks) {\n    const result = ['General'];\n    const candidates = tasks.filter((task) => task.group).map((task) => task.group);\n    // reorder\n    if (candidates.includes('Platform')) {\n      result.push('Platform');\n    }\n    for (const group of candidates) {\n      if (!result.includes(group)) {\n        result.push(group);\n      }\n    }\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport { IS_WINDOWS } from '../constants';\nimport ProjectTasksTreeProvider from './task-tree';\nimport { extension } from '../main';\nimport vscode from 'vscode';\n\nexport default class ProjectTaskManager {\n  static PROVIDER_TYPE = 'PlatformIO';\n  static TASKS_VIEW_ID = 'platformio-ide.projectTasks';\n  static AUTO_REFRESH_DELAY = 500; // 0.5 sec\n\n  constructor(projectDir, projectObserver) {\n    this.projectDir = projectDir;\n    this.projectObserver = projectObserver;\n    this.subscriptions = [];\n\n    this._sid = Math.random();\n    this._refreshTimeout = undefined;\n    this._restoreOnDidEndTask = undefined;\n    this._tasksToRestore = [];\n\n    this.refresh();\n  }\n\n  dispose() {\n    pioNodeHelpers.misc.disposeSubscriptions(this.subscriptions);\n  }\n\n  requestRefresh() {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n    this._refreshTimeout = setTimeout(\n      this.refresh.bind(this),\n      ProjectTaskManager.AUTO_REFRESH_DELAY\n    );\n  }\n\n  async refresh({ force = false } = {}) {\n    this.dispose();\n\n    if (force) {\n      this.projectObserver.resetCache();\n      this._sid = Math.random();\n    }\n\n    const projectEnvs = await this.projectObserver.getProjectEnvs();\n    const projectTasks = [...(await this.projectObserver.getDefaultTasks())];\n    for (const item of projectEnvs) {\n      projectTasks.push(\n        ...((await this.projectObserver.getLoadedEnvTasks(item.name)) || [])\n      );\n    }\n\n    const taskViewer = vscode.window.createTreeView(ProjectTaskManager.TASKS_VIEW_ID, {\n      treeDataProvider: new ProjectTasksTreeProvider(\n        this._sid,\n        projectEnvs,\n        projectTasks,\n        this.projectObserver.getActiveEnvName()\n      ),\n      showCollapseAll: true,\n    });\n\n    this.subscriptions.push(\n      taskViewer,\n\n      // pre-fetch expanded env tasks\n      taskViewer.onDidExpandElement(async ({ element }) => {\n        if (element.env) {\n          await this.onDidRequestEnvTasks(element.env);\n        }\n      }),\n\n      // register VSCode Task Provider\n      vscode.tasks.registerTaskProvider(ProjectTaskManager.PROVIDER_TYPE, {\n        provideTasks: async () => projectTasks.map((task) => this.toVSCodeTask(task)),\n        resolveTask: () => {\n          return undefined;\n        },\n      }),\n\n      vscode.tasks.onDidEndTaskProcess((event) => this.onDidEndTaskProcess(event))\n    );\n\n    this.registerTaskBasedCommands(projectTasks);\n    vscode.commands.executeCommand(\n      'setContext',\n      'pioMultiEnvProject',\n      projectEnvs.length > 1\n    );\n  }\n\n  async onDidRequestEnvTasks(name) {\n    if (await this.projectObserver.getLoadedEnvTasks(name)) {\n      return;\n    }\n    await this.projectObserver.loadEnvTasks(name);\n    return this.requestRefresh();\n  }\n\n  toVSCodeTask(projectTask) {\n    const envClone = Object.create(process.env);\n    if (process.env.PLATFORMIO_PATH) {\n      envClone.PATH = process.env.PLATFORMIO_PATH;\n      envClone.Path = process.env.PLATFORMIO_PATH;\n    }\n    const vscodeTask = new vscode.Task(\n      {\n        type: ProjectTaskManager.PROVIDER_TYPE,\n        task: projectTask.id,\n      },\n      vscode.workspace.getWorkspaceFolder(vscode.Uri.file(this.projectDir)),\n      projectTask.title,\n      ProjectTaskManager.PROVIDER_TYPE,\n      new vscode.ProcessExecution(\n        IS_WINDOWS ? 'platformio.exe' : 'platformio',\n        projectTask.args,\n        {\n          cwd: this.projectDir,\n          env: envClone,\n        }\n      ),\n      '$platformio'\n    );\n    vscodeTask.presentationOptions = {\n      panel: vscode.TaskPanelKind.Dedicated,\n    };\n    if (projectTask.isBuild()) {\n      vscodeTask.group = vscode.TaskGroup.Build;\n    } else if (projectTask.isClean()) {\n      vscodeTask.group = vscode.TaskGroup.Clean;\n    } else if (projectTask.isTest()) {\n      vscodeTask.group = vscode.TaskGroup.Test;\n    }\n    return vscodeTask;\n  }\n\n  runTask(task) {\n    this._restoreOnDidEndTask = undefined;\n    this._tasksToRestore = [];\n    this._autoCloseSerialMonitor(task);\n    // skip MonitorAndUpload task thatwill be added to this._tasksToRestore\n    if (\n      this._tasksToRestore.some((t) => this.isMonitorAndUploadTask(t)) &&\n      this.isMonitorAndUploadTask(task)\n    ) {\n      return;\n    }\n    vscode.commands.executeCommand('workbench.action.tasks.runTask', {\n      type: ProjectTaskManager.PROVIDER_TYPE,\n      task: task.id,\n    });\n  }\n\n  _autoCloseSerialMonitor(task) {\n    const closeMonitorConds = [\n      extension.getSetting('autoCloseSerialMonitor'),\n      ['upload', 'test'].some((arg) => task.args.includes(arg)),\n    ];\n    if (!closeMonitorConds.every((value) => value)) {\n      return;\n    }\n    this._restoreOnDidEndTask = task;\n    vscode.tasks.taskExecutions.forEach((event) => {\n      const isMonitorAndUploadTask = this.isMonitorAndUploadTask(event.task);\n      const skipConds = [\n        // skip non-PlatformIO task\n        event.task.definition.type !== ProjectTaskManager.PROVIDER_TYPE,\n        !event.task.execution.args.includes('monitor'),\n        this.areTasksEqual(task, event.task) && !isMonitorAndUploadTask,\n      ];\n      if (skipConds.some((value) => value)) {\n        return;\n      }\n      if (\n        isMonitorAndUploadTask ||\n        ['device', 'monitor'].every((arg) => event.task.execution.args.includes(arg))\n      ) {\n        this._tasksToRestore.push(event.task);\n      }\n      event.terminate();\n    });\n  }\n\n  onDidEndTaskProcess(event) {\n    const skipConds = [\n      !this._restoreOnDidEndTask,\n      event.execution.task.definition.type !== ProjectTaskManager.PROVIDER_TYPE,\n      event.exitCode !== 0 && !this.isMonitorAndUploadTask(event.execution.task),\n      this.areTasksEqual(this._restoreOnDidEndTask, event.execution.task),\n    ];\n    if (skipConds.some((value) => value)) {\n      return;\n    }\n    this._restoreOnDidEndTask = undefined;\n    setTimeout(() => {\n      while (this._tasksToRestore.length) {\n        vscode.tasks.executeTask(this._tasksToRestore.pop());\n      }\n    }, parseInt(extension.getSetting('reopenSerialMonitorDelay')));\n  }\n\n  isMonitorAndUploadTask(task) {\n    const args = task.args || task.execution.args;\n    return ['--target', 'upload', 'monitor'].every((arg) => args.includes(arg));\n  }\n\n  areTasksEqual(task1, task2) {\n    if (!task1 || !task2) {\n      return task1 === task2;\n    }\n    const args1 = task1.args || task1.execution.args;\n    const args2 = task2.args || task2.execution.args;\n    return args1 === args2;\n  }\n\n  registerTaskBasedCommands(tasks) {\n    const _runTask = (name) => {\n      const candidates = tasks.filter(\n        (task) =>\n          task.name === name && task.coreEnv === this.projectObserver.getActiveEnvName()\n      );\n      this.runTask(candidates[0]);\n    };\n\n    this.subscriptions.push(\n      vscode.commands.registerCommand('platformio-ide.build', () => {\n        if (extension.getSetting('buildTask')) {\n          return vscode.commands.executeCommand(\n            'workbench.action.tasks.runTask',\n            extension.getSetting('buildTask')\n          );\n        }\n        _runTask('Build');\n      }),\n      vscode.commands.registerCommand('platformio-ide.upload', () =>\n        _runTask(\n          extension.getSetting('forceUploadAndMonitor')\n            ? 'Upload and Monitor'\n            : 'Upload'\n        )\n      ),\n      vscode.commands.registerCommand('platformio-ide.test', () => _runTask('Test')),\n      vscode.commands.registerCommand('platformio-ide.clean', () => _runTask('Clean')),\n      vscode.commands.registerCommand('platformio-ide.serialMonitor', () =>\n        _runTask('Monitor')\n      ),\n      vscode.commands.registerCommand('platformio-ide.remoteUpload', () =>\n        _runTask('Remote Upload')\n      )\n    );\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nexport default class StateStorage {\n  constructor(globalState, stateKey = 'miscStates') {\n    this._globalState = globalState;\n    this._stateKey = stateKey;\n  }\n\n  getState() {\n    try {\n      const value = this._globalState.get(this._stateKey);\n      return value || {};\n    } catch (err) {\n      return {};\n    }\n  }\n\n  getValue(key) {\n    return (this.getState() || {})[key];\n  }\n\n  setValue(key, value) {\n    const data = this.getState();\n    data[key] = value;\n    this._globalState.update(this._stateKey, data);\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport vscode from 'vscode';\n\nexport default class PIOTerminal {\n  constructor() {\n    this._instance = undefined;\n  }\n\n  new() {\n    const envClone = Object.create(process.env);\n    if (process.env.PLATFORMIO_PATH) {\n      envClone.PATH = process.env.PLATFORMIO_PATH;\n      envClone.Path = process.env.PLATFORMIO_PATH;\n    }\n    return vscode.window.createTerminal({\n      name: 'PlatformIO CLI',\n      env: envClone,\n    });\n  }\n\n  sendText(text) {\n    if (!this._instance || this._instance.exitStatus !== undefined) {\n      this._instance = this.new();\n    }\n    this._instance.sendText(text);\n    this._instance.show();\n  }\n\n  dispose() {\n    if (this._instance) {\n      this._instance.dispose();\n    }\n    this._instance = undefined;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport os from 'os';\nimport vscode from 'vscode';\n\nexport async function notifyError(title, err) {\n  const description = err.stack || err.toString();\n  const ghbody = `# Description of problem\n  Leave a comment...\n\n  BEFORE SUBMITTING, PLEASE SEARCH FOR DUPLICATES IN\n  - https://github.com/platformio/platformio-vscode-ide/issues?q=is%3Aissue+\n\n  # Configuration\n\n  VSCode: ${vscode.version}\n  PIO IDE: v${getIDEVersion()}\n  System: ${os.type()}, ${os.release()}, ${os.arch()}\n\n  # Exception\n  \\`\\`\\`\n  ${description}\n  \\`\\`\\`\n  `;\n  const reportUrl = pioNodeHelpers.misc.getErrorReportUrl(title, ghbody);\n\n  let action = 'Report a problem';\n  if (!reportUrl.includes('issues/new')) {\n    action = 'Check available solutions';\n  }\n\n  const selected = await vscode.window.showErrorMessage(\n    description.substring(0, 700) + '...',\n    action\n  );\n  if (selected === action) {\n    vscode.commands.executeCommand('vscode.open', vscode.Uri.parse(reportUrl));\n  }\n  console.error(err);\n}\n\nexport function getIDEManifest() {\n  return vscode.extensions.getExtension('platformio.platformio-ide').packageJSON;\n}\n\nexport function getIDEVersion() {\n  return getIDEManifest().version;\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as vscode from 'vscode';\n\nclass QuickItem extends vscode.TreeItem {\n  constructor(label, command, args, collapsibleState, children) {\n    super(label, collapsibleState);\n    if (command) {\n      this.command = {\n        title: label,\n        command,\n        arguments: args,\n      };\n    }\n    this.customChildren = children;\n  }\n}\n\nexport default class QuickAccessTreeProvider {\n  getChildren(element) {\n    if (element && element.customChildren) {\n      return element.customChildren;\n    }\n    return [\n      new QuickItem(\n        'PIO Home',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('Open', 'platformio-ide.showHome'),\n          new QuickItem('PIO Account', 'platformio-ide.showHome', ['/account']),\n          new QuickItem('Inspect', 'platformio-ide.showHome', ['/inspect']),\n          new QuickItem('Projects & Configuration', 'platformio-ide.showHome', [\n            '/projects',\n          ]),\n          new QuickItem('Libraries', 'platformio-ide.showHome', ['/libraries']),\n          new QuickItem('Boards', 'platformio-ide.showHome', ['/boards']),\n          new QuickItem('Platforms', 'platformio-ide.showHome', ['/platforms']),\n          new QuickItem('Devices', 'platformio-ide.showHome', ['/device']),\n        ]\n      ),\n      new QuickItem(\n        'Debug',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('Start Debugging', 'platformio-ide.startDebugging'),\n          new QuickItem('Toggle Debug Console', 'workbench.debug.action.toggleRepl'),\n        ]\n      ),\n      new QuickItem(\n        'Updates',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('Library Updates', 'platformio-ide.showHome', [\n            '/libraries/updates',\n          ]),\n          new QuickItem('Platform Updates', 'platformio-ide.showHome', [\n            '/platforms/updates',\n          ]),\n          new QuickItem('Update All', 'platformio-ide.updateCore'),\n        ]\n      ),\n      new QuickItem(\n        'Miscellaneous',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('PlatformIO Core CLI', 'platformio-ide.openPIOCoreCLI'),\n          new QuickItem('Clone Git Project', 'git.clone'),\n          new QuickItem('New Terminal', 'platformio-ide.newTerminal'),\n          new QuickItem('Upgrade PlatformIO Core', 'platformio-ide.upgradeCore'),\n        ]\n      ),\n    ];\n  }\n\n  getTreeItem(element) {\n    return element;\n  }\n}\n","module.exports = require(\"fs\");","module.exports = require(\"fs-plus\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"platformio-node-helpers\");","module.exports = require(\"platformio-vscode-debug\");","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(939);\n"],"names":["IS_WINDOWS","process","platform","startsWith","IS_OSX","pioNodeHelpers","PIOHome","constructor","this","subscriptions","_currentPanel","undefined","_lastStartUrl","defaultStartUrl","push","vscode","workspace","onDidChangeWorkspaceFolders","disposePanel","bind","startUrl","column","window","activeTextEditor","viewColumn","webview","html","getWebviewContent","reveal","err","console","warn","newPanel","panel","createWebviewPanel","extension","getEnterpriseSetting","ViewColumn","One","enableScripts","retainContextWhenHidden","onDidDispose","onPanelDisposed","iconPath","Uri","file","path","join","context","extensionPath","getLoadingContent","toString","includes","notifyError","getTheme","getConfiguration","colorTheme","toLowerCase","home","ensureServerStarted","port","getSetting","host","onIDECommand","async","command","params","projectObservable","saveProjectStateItem","fsPath","workspaceFolders","updateWorkspaceFolders","length","uri","commands","executeCommand","editor","showTextDocument","gotoPosition","Position","line","selection","Selection","revealRange","Range","TextEditorRevealType","InCenter","theme","getFrontendUrl","start","dispose","misc","disposeSubscriptions","shutdownServer","globalState","disableAutoUpdates","LOCK_TIMEOUT","LOCK_KEY","STORAGE_STATE_KEY","stateStorage","StateStorage","config","stages","installer","PlatformIOCoreStage","onDidStatusChange","pioCoreVersionSpec","PIO_CORE_VERSION_SPEC","useBuiltinPython","get","useBuiltinPIOCore","useDevelopmentPIOCore","pythonPrompt","PythonPrompt","locked","lock","update","Date","getTime","unlock","lockTime","parseInt","result","stage","check","progress","stageIncrementTotal","install","message","increment","report","destroy","map","STATUS_TRY_AGAIN","STATUS_ABORT","STATUS_CUSTOMEXE","selectedItem","showInformationMessage","title","isCloseAffordance","pythonExecutable","status","parse","showInputBox","prompt","placeHolder","validateInput","value","fs","isFileSync","activate","deactivate","piodebug","utils","pioTerm","pioHome","_enterpriseSettings","PIOTerminal","hasPIOProject","ProjectObservable","getPIOProjectDirs","has","patchOSEnviron","startInstaller","handleUseDevelopmentPIOCoreConfiguration","registerTreeDataProvider","QuickAccessTreeProvider","registerGlobalCommands","initDebug","initToolbar","ignoreCommands","startPIOHome","maybeRateExtension","warnAboutConflictedExtensions","onDidChangeActiveTextEditor","warnAboutInoFile","filterCommands","id","loadEnterpriseSettings","ext","extensions","all","find","item","isActive","exports","settings","defaultValue","extraVars","PLATFORMIO_IDE","getIDEVersion","http_proxy","env","HTTP_PROXY","HTTPS_PROXY","https_proxy","proc","caller","extraPath","im","InstallationManager","withProgress","location","ProgressLocation","Window","Notification","outputChannel","createOutputChannel","show","appendLine","action","showAtStartup","registerCommand","toggle","new","sendText","filter","reverse","forEach","index","text","tooltip","sbItem","createStatusBarItem","StatusBarAlignment","Left","STATUS_BAR_PRIORITY_START","onDidChangeConfiguration","e","affectsConfiguration","envDir","core","getEnvDir","isDirectorySync","setTimeout","removeSync","disposeLocalSubscriptions","stateKey","state","getValue","done","callCounter","setValue","conflicted","CONFLICTED_EXTENSION_IDS","showWarningMessage","packageJSON","displayName","document","fileName","endsWith","_persistentState","_taskManager","_sbEnvSwitcher","_pool","project","ProjectPool","ide","api","createFileSystemWatcher","createDirSystemWatcher","dir","withIndexRebuildingProgress","task","viewId","withTasksLoadingProgress","ProjectTaskManager","TASKS_VIEW_ID","onDidChangeProjectConfig","projectDir","requestRefresh","saveActiveProjectState","onDidNotifyError","autoPreloadEnvTasks","autoRebuild","getActiveEditorProjectDir","switchToProject","findActiveProjectDir","getActiveObserver","rebuildIndex","force","refresh","runTask","registerEnvSwitcher","accessSync","folder","isPIOProjectSync","getSelectedProjectDir","pioProjectDirs","currentActiveDir","getActiveProjectDir","lastActiveDir","resource","scheme","getWorkspaceFolder","loadProjectStateItem","name","projects","key","Object","keys","observer","getActiveEnvName","options","error","currentProjectDir","currentEnvName","getObserver","switchProjectEnv","envName","switch","visibleTextEditors","updateEnvSwitcher","pickProjectEnv","basename","items","envs","getProjectEnvs","shortProjectDir","dirname","label","description","pickedItem","showQuickPick","matchOnDescription","ProjectTasksTreeProvider","tasks","activeEnvName","multiEnvProject","getTreeItem","TreeItem","taskToTreeItem","treeItem","ThemeIcon","arguments","coreEnv","multienv","getChildren","element","group","getEnvGroupChildren","getEnvChildren","getRootChildren","DEFAULT_ENV_NAME","TreeItemCollapsibleState","Collapsed","Expanded","envTasks","getTaskGroups","Folder","candidates","projectObserver","_sid","Math","random","_refreshTimeout","_restoreOnDidEndTask","_tasksToRestore","clearTimeout","AUTO_REFRESH_DELAY","resetCache","projectEnvs","projectTasks","getDefaultTasks","getLoadedEnvTasks","taskViewer","createTreeView","treeDataProvider","showCollapseAll","onDidExpandElement","onDidRequestEnvTasks","registerTaskProvider","PROVIDER_TYPE","provideTasks","toVSCodeTask","resolveTask","onDidEndTaskProcess","event","registerTaskBasedCommands","loadEnvTasks","projectTask","envClone","create","PLATFORMIO_PATH","PATH","Path","vscodeTask","Task","type","ProcessExecution","args","cwd","presentationOptions","TaskPanelKind","Dedicated","isBuild","TaskGroup","Build","isClean","Clean","isTest","Test","_autoCloseSerialMonitor","some","t","isMonitorAndUploadTask","arg","every","taskExecutions","definition","execution","areTasksEqual","terminate","exitCode","executeTask","pop","task1","task2","_runTask","_globalState","_stateKey","getState","data","_instance","createTerminal","exitStatus","stack","ghbody","version","os","release","arch","reportUrl","getErrorReportUrl","showErrorMessage","substring","getIDEManifest","getExtension","QuickItem","collapsibleState","children","super","customChildren","module","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}